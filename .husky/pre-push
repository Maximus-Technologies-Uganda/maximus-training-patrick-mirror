#!/usr/bin/env sh
set -e

echo ""
echo "╔════════════════════════════════════════════════════════════╗"
echo "║         Mandatory Pre-Push Validation (All Tiers)         ║"
echo "╚════════════════════════════════════════════════════════════╝"
echo ""

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

echo "🧪 TIER 1+2: Running type checks and linting for changed workspaces..."

# Compute changed files based on the refs being pushed (from STDIN)
# pre-push receives lines: <local ref> <local sha> <remote ref> <remote sha>
REMOTE_NAME="$1"
CHANGED_FILES=""

while IFS=' ' read -r local_ref local_sha remote_ref remote_sha; do
  # Skip deletes (local sha is all zeros)
  if [ "$local_sha" = "0000000000000000000000000000000000000000" ]; then
    continue
  fi

  # Determine base commit for diff
  if [ "$remote_sha" = "0000000000000000000000000000000000000000" ]; then
    # New remote ref; try to diff from the remote's default branch merge-base
    DEFAULT_REMOTE_REF=$(git symbolic-ref -q "refs/remotes/$REMOTE_NAME/HEAD" 2>/dev/null || true)
    BASE_COMMIT=""
    if [ -n "$DEFAULT_REMOTE_REF" ]; then
      DEFAULT_REMOTE_REF=${DEFAULT_REMOTE_REF#refs/remotes/}
      BASE_COMMIT=$(git merge-base "$DEFAULT_REMOTE_REF" "$local_sha" 2>/dev/null || true)
    fi
    # Fallback to empty tree if merge-base not available
    if [ -z "$BASE_COMMIT" ]; then
      BASE_COMMIT=$(git hash-object -t tree /dev/null)
    fi
  else
    BASE_COMMIT="$remote_sha"
  fi

  DIFF_OUT=$(git diff --name-only "$BASE_COMMIT" "$local_sha")
  if [ -n "$DIFF_OUT" ]; then
    CHANGED_FILES="$CHANGED_FILES
$DIFF_OUT"
  fi
done

# Derive workspace roots touched
WORKSPACES=""
# Normalize file list (unique) first, then iterate without a subshell so WORKSPACES persists
FILES_NORMALIZED=$(printf "%b" "$CHANGED_FILES" | sed '/^$/d' | sort -u)

# Use here-doc to keep loop in current shell
while IFS= read -r file; do
  case "$file" in
    frontend-next/*)
      WORKSPACES="$WORKSPACES,frontend-next" ;;
    frontend/*)
      WORKSPACES="$WORKSPACES,frontend" ;;
    api/*)
      WORKSPACES="$WORKSPACES,api" ;;
    quote/*)
      WORKSPACES="$WORKSPACES,quote" ;;
    todo/*)
      WORKSPACES="$WORKSPACES,todo" ;;
    expense/*)
      WORKSPACES="$WORKSPACES,expense" ;;
    stopwatch/*)
      WORKSPACES="$WORKSPACES,stopwatch" ;;
  esac
done <<EOF
$FILES_NORMALIZED
EOF

# Normalize list (remove leading comma and duplicates)
WORKSPACES=$(echo "$WORKSPACES" | sed 's/^,//' | tr ',' '\n' | sort -u | tr '\n' ',' | sed 's/,$//')

if [ -z "$WORKSPACES" ]; then
  echo "No workspace changes detected; skipping type checks."
else
  echo "Changed workspaces: $WORKSPACES"
  npm run typecheck:bail -- --projects="$WORKSPACES"
fi

# Lint already ran in pre-commit via lint-staged; skip redundant check
# Only run full lint if there are .eslintrc config changes
LINT_CONFIG_CHANGED=$(git diff HEAD~1 .eslintrc.json .eslintignore 2>/dev/null || true)
if [ -n "$LINT_CONFIG_CHANGED" ]; then
  echo "🔍 ESLint config changed; running full lint..."
  npm run lint
else
  echo "✅ Lint already checked in pre-commit (via lint-staged)"
fi

echo ""
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo "🧪 TIER 3: Running full comprehensive local CI..."
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo ""

# Run the full local CI test suite (Tier 3)
if ! bash scripts/test-locally.sh; then
  echo ""
  echo "❌ Local CI tests FAILED. Please fix errors and try again."
  echo ""
  exit 1
fi

echo ""
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo "🎯 TIER 4: Simulating GitHub Actions locally..."
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo ""

# Check if act is available for Tier 4 (MANDATORY)
if ! command -v act &> /dev/null; then
  echo ""
  echo "❌ TIER 4 FAILED: act tool not found (MANDATORY)"
  echo ""
  echo "   Install act to enable GitHub Actions simulation:"
  echo ""
  echo "   Windows:  choco install act"
  echo "   macOS:    brew install act"
  echo "   Linux:    https://github.com/nektos/act/releases"
  echo ""
  echo "   After installation, verify with: act --version"
  echo "   Then try pushing again: git push"
  echo ""
  exit 1
fi

echo "✓ act tool found; running GitHub Actions simulation..."

if ! act -W .github/workflows/quality-gate.yml --artifact-server-path=/tmp/act-artifacts 2>&1 | tail -50; then
  echo ""
  echo "❌ TIER 4 FAILED: GitHub Actions simulation had errors"
  echo ""
  exit 1
else
  echo "✓ GitHub Actions simulation passed!"
fi

echo ""
echo "╔════════════════════════════════════════════════════════════╗"
echo "║  ✓ All mandatory pre-push validations passed!              ║"
echo "║  Proceeding with push to GitHub...                        ║"
echo "╚════════════════════════════════════════════════════════════╝"
echo ""
