openapi: 3.1.0
info:
  title: Identity Platform & Posts API
  version: 0.0.0
servers:
  - url: http://localhost:3000/
    description: Local development server
  - url: https://maximus-training-api-673209018655.africa-south1.run.app/
    description: Staging Cloud Run deployment
  - url: https://maximus-training-api-wyb2jsgqyq-bq.a.run.app/
    description: Production Cloud Run deployment
tags:
  - name: Posts
    description: CRUD endpoints for the identity platform posts service.
  - name: Health
    description: Service health and dependency monitoring endpoints.
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    Err401:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorEnvelope'
    Err403:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorEnvelope'
    Err422:
      description: Unprocessable Entity
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ValidationErrorEnvelope'
    Err429:
      description: Too Many Requests
      headers:
        Retry-After:
          schema:
            type: integer
          description: Seconds until next allowed request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorEnvelope'
    Err413:
      description: Payload Too Large
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorEnvelope'
    Err503:
      description: Service Unavailable (read-only mode or dependency failure)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorEnvelope'
  schemas:
    ErrorEnvelope:
      type: object
      required: [code, message]
      properties:
        code:
          type: string
        message:
          type: string
        details:
          type: object
          additionalProperties: true
    ValidationErrorEnvelope:
      allOf:
        - $ref: '#/components/schemas/ErrorEnvelope'
        - type: object
          properties:
            details:
              type: array
              items:
                type: object
                properties:
                  path: { type: string }
                  issue: { type: string }
paths:
  /posts:
    get:
      operationId: listPosts
      tags: [Posts]
      summary: List posts (public)
      responses:
        '200':
          description: OK
    post:
      operationId: createPost
      tags: [Posts]
      summary: Create a post
      security:
        - BearerAuth: []
      responses:
        '201':
          description: Created
        '401': { $ref: '#/components/responses/Err401' }
        '403': { $ref: '#/components/responses/Err403' }
        '422': { $ref: '#/components/responses/Err422' }
        '429': { $ref: '#/components/responses/Err429' }
        '413': { $ref: '#/components/responses/Err413' }
        '503': { $ref: '#/components/responses/Err503' }
  /posts/{id}:
    get:
      operationId: getPost
      tags: [Posts]
      summary: Get post (public)
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
    put:
      operationId: updatePost
      tags: [Posts]
      summary: Update a post
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '401': { $ref: '#/components/responses/Err401' }
        '403': { $ref: '#/components/responses/Err403' }
        '422': { $ref: '#/components/responses/Err422' }
        '429': { $ref: '#/components/responses/Err429' }
        '413': { $ref: '#/components/responses/Err413' }
        '503': { $ref: '#/components/responses/Err503' }
    delete:
      operationId: deletePost
      tags: [Posts]
      summary: Delete a post
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '401': { $ref: '#/components/responses/Err401' }
        '403': { $ref: '#/components/responses/Err403' }
        '429': { $ref: '#/components/responses/Err429' }
        '413': { $ref: '#/components/responses/Err413' }
        '503': { $ref: '#/components/responses/Err503' }
  /health:
    get:
      operationId: getHealth
      tags: [Health]
      summary: Service health probe
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                required: [service, status, commit, time, uptime_s, dependencies]
                additionalProperties: false
                properties:
                  service:
                    type: string
                  status:
                    type: string
                    enum: [ok, error]
                  commit:
                    type: string
                    description: Git commit SHA deployed
                  time:
                    type: string
                    format: date-time
                  uptime_s:
                    type: integer
                    minimum: 0
                  dependencies:
                    type: object
                    required: [firebase, db]
                    additionalProperties:
                      type: string
                    properties:
                      firebase:
                        type: string
                        enum: [ok, degraded, down]
                      db:
                        type: string
                        enum: [ok, degraded, down]
              examples:
                default:
                  value:
                    service: api
                    status: ok
                    commit: abc1234
                    time: '2025-10-29T12:00:00.000Z'
                    uptime_s: 42
                    dependencies:
                      firebase: ok
                      db: ok
                dependencyDown:
                  value:
                    service: api
                    status: error
                    commit: abc1234
                    time: '2025-10-29T12:00:00.000Z'
                    uptime_s: 42
                    dependencies:
                      firebase: down
                      db: ok
        '503':
          description: Dependency failure
          headers:
            Retry-After:
              description: Number of seconds clients should wait before retrying the probe.
              schema:
                type: integer
                minimum: 1
          content:
            application/json:
              schema: { $ref: '#/paths/~1health/get/responses/200/content/application~1json/schema' }
              examples:
                dependencyDown:
                  value:
                    service: api
                    status: error
                    commit: abc1234
                    time: '2025-10-29T12:00:00.000Z'
                    uptime_s: 42
                    dependencies:
                      firebase: down
                      db: ok
