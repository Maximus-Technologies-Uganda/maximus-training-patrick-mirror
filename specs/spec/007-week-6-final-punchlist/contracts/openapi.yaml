openapi: 3.1.0
info:
  title: Blog Posts API
  version: "1.0.0"
  description: Initial contract stub for Week 6 Finish-to-Green
  contact:
    name: API Team
    url: https://github.com/Maximus-Technologies-Uganda/Training
    email: api-team@example.com
servers:
  - url: https://api.example.com
paths:
  /posts:
    get:
      operationId: listPosts
      tags: [Posts]
      description: List posts with pagination for SSR display on /posts
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
        - name: pageSize
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
      responses:
        '200':
          description: List of posts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostList'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      operationId: createPost
      tags: [Posts]
      description: Create a new post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostCreate'
      responses:
        '201':
          description: Created
          headers:
            Location:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /posts/{id}:
    get:
      operationId: getPost
      description: Get a post by ID
      tags: [Posts]
      parameters:
        - $ref: '#/components/parameters/PostId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      operationId: replacePost
      description: Replace a post by ID
      tags: [Posts]
      parameters:
        - $ref: '#/components/parameters/PostId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostCreate'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      operationId: updatePost
      description: Update fields of a post by ID
      tags: [Posts]
      parameters:
        - $ref: '#/components/parameters/PostId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostUpdate'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      operationId: deletePost
      description: Delete a post by ID
      tags: [Posts]
      parameters:
        - $ref: '#/components/parameters/PostId'
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /health:
    get:
      operationId: getHealth
      description: Health check for service availability
      tags: [System]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                required: [status]
                additionalProperties: false
                properties:
                  status:
                    type: string
                    enum: [ok]
tags:
  - name: Posts
    description: Operations related to blog posts
  - name: System
    description: System and health endpoints
components:
  parameters:
    PostId:
      name: id
      in: path
      required: true
      schema:
        type: string
  schemas:
    Post:
      type: object
      required: [id, title, content, published, createdAt, updatedAt]
      properties:
        id:
          type: string
        title:
          type: string
          minLength: 1
          maxLength: 200
        content:
          type: string
          minLength: 1
          maxLength: 10000
        tags:
          type: array
          items:
            type: string
            minLength: 1
            maxLength: 40
          maxItems: 20
        published:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      additionalProperties: false
    PostCreate:
      type: object
      required: [title, content]
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 200
        content:
          type: string
          minLength: 1
          maxLength: 10000
        tags:
          type: array
          items:
            type: string
            minLength: 1
            maxLength: 40
          maxItems: 20
        published:
          type: boolean
      additionalProperties: false
    PostUpdate:
      type: object
      additionalProperties: false
      minProperties: 1
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 200
        content:
          type: string
          minLength: 1
          maxLength: 10000
        tags:
          type: array
          items:
            type: string
            minLength: 1
            maxLength: 40
          maxItems: 20
        published:
          type: boolean
    PostList:
      type: object
      required: [page, pageSize, hasNextPage, items]
      properties:
        page:
          type: integer
          minimum: 1
        pageSize:
          type: integer
          minimum: 1
        hasNextPage:
          type: boolean
        items:
          type: array
          items:
            $ref: '#/components/schemas/Post'
        totalItems:
          type: integer
          minimum: 0
        totalPages:
          type: integer
          minimum: 0
        currentPage:
          type: integer
          minimum: 1
      additionalProperties: false
    Error:
      type: object
      required: [code, message]
      properties:
        code:
          type: string
        message:
          type: string
        details: {}
      additionalProperties: false
