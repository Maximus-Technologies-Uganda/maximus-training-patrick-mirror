substitutions:
  _SERVICE_NAME: maximus-training-api
  _REGION: africa-south1
  _AR_REPOSITORY: cloud-run-images
  _MEMORY: 512Mi
  _CPU: '1'
  _MIN_INSTANCES: '0'
  _MAX_INSTANCES: '10'
  _TIMEOUT: 300s
  _INGRESS: all
  _SERVICE_ACCOUNT: ""
  _ALLOW_UNAUTH: "false"

options:
  logging: CLOUD_LOGGING_ONLY

steps:
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    id: Debug Context
    entrypoint: bash
    args:
      - -ceu
      - |
        set -euxo pipefail
        echo "Project: ${PROJECT_ID}"
        gcloud --version
        gcloud auth list
        gcloud config list

  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    id: Ensure Artifact Registry
    entrypoint: bash
    args:
      - -ceu
      - |
        set -euxo pipefail
        gcloud artifacts repositories describe "${_AR_REPOSITORY}" --location="${_REGION}" \
          || gcloud artifacts repositories create "${_AR_REPOSITORY}" --repository-format=docker --location="${_REGION}" --description="Cloud Run images" \
          || echo "Repo ensure step failed (permissions?); continuing."
  - name: 'gcr.io/cloud-builders/docker'
    id: Build Image
    args:
      - build
      - '-t'
      - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_AR_REPOSITORY}/${_SERVICE_NAME}:${BUILD_ID}'
      - '-f'
      - 'api/Dockerfile'
      - 'api'

  - name: 'gcr.io/cloud-builders/docker'
    id: Push Image
    args:
      - push
      - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_AR_REPOSITORY}/${_SERVICE_NAME}:${BUILD_ID}'

  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    id: Deploy to Cloud Run
    entrypoint: bash
    args:
      - -ceu
      - |
        set -euxo pipefail
        DEPLOY_ARGS=(run deploy "${_SERVICE_NAME}" \
          --image="${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_AR_REPOSITORY}/${_SERVICE_NAME}:${BUILD_ID}" \
          --project="${PROJECT_ID}" \
          --region="${_REGION}" \
          --platform=managed \
          --port=8080 \
          --memory="${_MEMORY}" \
          --cpu="${_CPU}" \
          --min-instances="${_MIN_INSTANCES}" \
          --max-instances="${_MAX_INSTANCES}" \
          --timeout="${_TIMEOUT}" \
          --ingress="${_INGRESS}")
        if [ -n "${_SERVICE_ACCOUNT}" ]; then
          DEPLOY_ARGS+=(--service-account="${_SERVICE_ACCOUNT}")
        fi
        if [ "${_ALLOW_UNAUTH}" = "true" ]; then
          DEPLOY_ARGS+=(--allow-unauthenticated)
        fi
        gcloud --verbosity=debug "${DEPLOY_ARGS[@]}"

  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    id: Verify Healthcheck
    entrypoint: bash
    args:
      - -ceu
      - |
        set -euxo pipefail
        if [ "${_ALLOW_UNAUTH}" != "true" ]; then
          echo "Service is private; skipping anonymous healthcheck."
          exit 0
        fi
        SERVICE_URL=$(gcloud run services describe "${_SERVICE_NAME}" --project "${PROJECT_ID}" --region "${_REGION}" --format='value(status.url)')
        echo "Service URL: $$SERVICE_URL"
        sleep 10
        for i in {1..20}; do
          CODE=$(curl -s -L --connect-timeout 5 --max-time 10 -o /dev/null -w "%{http_code}" "$$SERVICE_URL/health") || true
          if [ "$$CODE" = "200" ]; then
            echo "Healthcheck OK (HTTP $$CODE)"
            exit 0
          fi
          echo "Attempt $$i: HTTP $$CODE; retrying..."
          sleep 5
        done
        echo "Healthcheck failed after retries"
        exit 1

images:
  - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_AR_REPOSITORY}/${_SERVICE_NAME}:${BUILD_ID}'

timeout: '1200s'
