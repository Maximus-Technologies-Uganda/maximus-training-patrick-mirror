{
  "openapi": "3.1.0",
  "info": {
    "title": "Identity Platform & Posts API",
    "version": "0.0.0",
    "description": "Production-hardened API for authenticated posts management",
    "contact": {
      "name": "Maximus Platform Team",
      "email": "platform@maximusglobal.com"
    }
  },
  "servers": [
    {
      "url": "http://localhost:8080",
      "description": "Local development (API)"
    },
    {
      "url": "http://localhost:3000",
      "description": "Local development (BFF)"
    },
    {
      "url": "https://maximus-training-api-wyb2jsgqyq-bq.a.run.app",
      "description": "Production API"
    },
    {
      "url": "https://maximus-training-frontend-673209018655.africa-south1.run.app",
      "description": "Production frontend/BFF"
    }
  ],
  "tags": [
    {
      "name": "Posts",
      "description": "Operations for listing and managing posts"
    },
    {
      "name": "Observability",
      "description": "Health and diagnostics endpoints"
    }
  ],
  "components": {
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "responses": {
      "Err401": {
        "description": "Unauthorized",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorEnvelope"
            },
            "example": {
              "code": "UNAUTHORIZED",
              "message": "Invalid or expired authentication token",
              "requestId": "550e8400-e29b-41d4-a716-446655440000"
            }
          }
        }
      },
      "Err403": {
        "description": "Forbidden",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorEnvelope"
            },
            "example": {
              "code": "FORBIDDEN",
              "message": "Insufficient permissions to access this resource",
              "requestId": "550e8400-e29b-41d4-a716-446655440001"
            }
          }
        }
      },
      "Err406": {
        "description": "Not Acceptable",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorEnvelope"
            },
            "example": {
              "code": "NOT_ACCEPTABLE",
              "message": "Accept header must allow application/json responses",
              "requestId": "550e8400-e29b-41d4-a716-446655440006"
            }
          }
        }
      },
      "Err415": {
        "description": "Unsupported Media Type",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorEnvelope"
            },
            "example": {
              "code": "UNSUPPORTED_MEDIA_TYPE",
              "message": "Content-Type must be application/json",
              "requestId": "550e8400-e29b-41d4-a716-446655440007"
            }
          }
        }
      },
      "Err422": {
        "description": "Unprocessable Entity",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ValidationErrorEnvelope"
            },
            "example": {
              "code": "VALIDATION_ERROR",
              "message": "Request validation failed",
              "requestId": "550e8400-e29b-41d4-a716-446655440002",
              "details": [
                {
                  "path": "title",
                  "issue": "Title is required"
                },
                {
                  "path": "body",
                  "issue": "Body must be at least 10 characters"
                }
              ]
            }
          }
        }
      },
      "Err429": {
        "description": "Too Many Requests",
        "headers": {
          "Retry-After": {
            "schema": {
              "type": "integer"
            },
            "description": "Seconds until next allowed request"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorEnvelope"
            },
            "example": {
              "code": "RATE_LIMITED",
              "message": "Rate limit exceeded. Please try again later.",
              "requestId": "550e8400-e29b-41d4-a716-446655440003",
              "details": [
                {
                  "scope": "ip",
                  "limit": "100 requests per 60 seconds",
                  "retryAfterSeconds": 42
                }
              ]
            }
          }
        }
      },
      "Err413": {
        "description": "Payload Too Large",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorEnvelope"
            },
            "example": {
              "code": "PAYLOAD_TOO_LARGE",
              "message": "Request payload exceeds 1MB limit",
              "requestId": "550e8400-e29b-41d4-a716-446655440004"
            }
          }
        }
      },
      "Err503": {
        "description": "Service Unavailable (read-only mode or dependency failure)",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorEnvelope"
            },
            "example": {
              "code": "SERVICE_UNAVAILABLE",
              "message": "Service is in read-only mode",
              "requestId": "550e8400-e29b-41d4-a716-446655440005"
            }
          }
        }
      }
    },
    "schemas": {
      "HealthDependencyStatus": {
        "type": "string",
        "description": "Operational status reported by a dependency health probe",
        "enum": [
          "ok",
          "down"
        ]
      },
      "HealthDependencies": {
        "type": "object",
        "required": [
          "firebase",
          "db"
        ],
        "properties": {
          "firebase": {
            "$ref": "#/components/schemas/HealthDependencyStatus",
            "description": "Firebase Admin SDK connectivity status"
          },
          "db": {
            "$ref": "#/components/schemas/HealthDependencyStatus",
            "description": "Primary database connectivity status"
          },
          "details": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Optional human-readable diagnostic details keyed by dependency name"
          }
        }
      },
      "HealthResponse": {
        "type": "object",
        "required": [
          "service",
          "status",
          "commit",
          "time",
          "uptime_s",
          "dependencies"
        ],
        "properties": {
          "service": {
            "type": "string",
            "description": "Logical service identifier responding to the probe"
          },
          "status": {
            "type": "string",
            "description": "Aggregated health status derived from dependency probes",
            "enum": [
              "ok",
              "degraded"
            ]
          },
          "commit": {
            "type": "string",
            "description": "Git commit SHA deployed for the responding service"
          },
          "time": {
            "type": "string",
            "format": "date-time",
            "description": "ISO-8601 timestamp when the health payload was generated"
          },
          "uptime_s": {
            "type": "number",
            "format": "double",
            "description": "Process uptime in whole seconds at the time of the probe"
          },
          "dependencies": {
            "$ref": "#/components/schemas/HealthDependencies"
          },
          "requestId": {
            "type": "string",
            "description": "Request correlation identifier echoed from the request or generated server-side"
          },
          "traceId": {
            "type": "string",
            "description": "Trace identifier extracted from W3C trace context headers",
            "pattern": "^[0-9a-fA-F]{32}$"
          }
        }
      },
      "ErrorEnvelope": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "string",
            "description": "Machine-readable error code"
          },
          "message": {
            "type": "string",
            "description": "Human-readable error message"
          },
          "requestId": {
            "type": "string",
            "format": "uuid",
            "description": "Unique request identifier for tracing"
          },
          "details": {
            "description": "Additional error context such as validation issues or metadata",
            "anyOf": [
              {
                "type": "null"
              },
              {
                "type": "object",
                "additionalProperties": true
              },
              {
                "type": "array",
                "items": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            ]
          }
        }
      },
      "ValidationErrorEnvelope": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ErrorEnvelope"
          },
          {
            "type": "object",
            "properties": {
              "details": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "path": {
                      "type": "string"
                    },
                    "issue": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        ]
      }
    }
  },
  "paths": {
    "/posts": {
      "get": {
        "operationId": "listPosts",
        "tags": [
          "Posts"
        ],
        "summary": "List posts (public)",
        "description": "Retrieve the collection of published posts that are visible to all users.",
        "security": [],
        "responses": {
          "200": {
            "description": "OK"
          },
          "406": {
            "$ref": "#/components/responses/Err406"
          }
        }
      },
      "post": {
        "operationId": "createPost",
        "tags": [
          "Posts"
        ],
        "summary": "Create a post",
        "description": "Create a new post owned by the authenticated user.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "401": {
            "$ref": "#/components/responses/Err401"
          },
          "403": {
            "$ref": "#/components/responses/Err403"
          },
          "406": {
            "$ref": "#/components/responses/Err406"
          },
          "413": {
            "$ref": "#/components/responses/Err413"
          },
          "415": {
            "$ref": "#/components/responses/Err415"
          },
          "422": {
            "$ref": "#/components/responses/Err422"
          },
          "429": {
            "$ref": "#/components/responses/Err429"
          },
          "503": {
            "$ref": "#/components/responses/Err503"
          }
        }
      }
    },
    "/posts/{id}": {
      "get": {
        "operationId": "getPost",
        "tags": [
          "Posts"
        ],
        "summary": "Get post (public)",
        "description": "Fetch the details for a single post by identifier.",
        "security": [],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "406": {
            "$ref": "#/components/responses/Err406"
          }
        }
      },
      "put": {
        "operationId": "updatePost",
        "tags": [
          "Posts"
        ],
        "summary": "Update a post",
        "description": "Replace the contents of an existing post owned by the authenticated user.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "$ref": "#/components/responses/Err401"
          },
          "403": {
            "$ref": "#/components/responses/Err403"
          },
          "406": {
            "$ref": "#/components/responses/Err406"
          },
          "413": {
            "$ref": "#/components/responses/Err413"
          },
          "415": {
            "$ref": "#/components/responses/Err415"
          },
          "422": {
            "$ref": "#/components/responses/Err422"
          },
          "429": {
            "$ref": "#/components/responses/Err429"
          },
          "503": {
            "$ref": "#/components/responses/Err503"
          }
        }
      },
      "delete": {
        "operationId": "deletePost",
        "tags": [
          "Posts"
        ],
        "summary": "Delete a post",
        "description": "Remove an existing post owned by the authenticated user.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "$ref": "#/components/responses/Err401"
          },
          "403": {
            "$ref": "#/components/responses/Err403"
          },
          "406": {
            "$ref": "#/components/responses/Err406"
          },
          "413": {
            "$ref": "#/components/responses/Err413"
          },
          "415": {
            "$ref": "#/components/responses/Err415"
          },
          "429": {
            "$ref": "#/components/responses/Err429"
          },
          "503": {
            "$ref": "#/components/responses/Err503"
          }
        }
      }
    },
    "/health": {
      "get": {
        "operationId": "getHealth",
        "tags": [
          "Health"
        ],
        "summary": "Service health probe",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "service",
                    "status",
                    "commit",
                    "time",
                    "uptime_s",
                    "dependencies"
                  ],
                  "additionalProperties": false,
                  "properties": {
                    "service": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok",
                        "error"
                      ]
                    },
                    "commit": {
                      "type": "string",
                      "description": "Git commit SHA deployed"
                    },
                    "time": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "uptime_s": {
                      "type": "integer",
                      "minimum": 0
                    },
                    "dependencies": {
                      "type": "object",
                      "required": [
                        "firebase",
                        "db"
                      ],
                      "additionalProperties": {
                        "type": "string"
                      },
                      "properties": {
                        "firebase": {
                          "type": "string",
                          "enum": [
                            "ok",
                            "degraded",
                            "down"
                          ]
                        },
                        "db": {
                          "type": "string",
                          "enum": [
                            "ok",
                            "degraded",
                            "down"
                          ]
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "default": {
                    "value": {
                      "service": "api",
                      "status": "ok",
                      "commit": "abc1234",
                      "time": "2025-10-29T12:00:00.000Z",
                      "uptime_s": 42,
                      "dependencies": {
                        "firebase": "ok",
                        "db": "ok"
                      }
                    }
                  },
                  "dependencyDown": {
                    "value": {
                      "service": "api",
                      "status": "error",
                      "commit": "abc1234",
                      "time": "2025-10-29T12:00:00.000Z",
                      "uptime_s": 42,
                      "dependencies": {
                        "firebase": "down",
                        "db": "ok"
                      }
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Dependency failure",
            "headers": {
              "Retry-After": {
                "description": "Number of seconds clients should wait before retrying the probe.",
                "schema": {
                  "type": "integer",
                  "minimum": 1
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "service",
                    "status",
                    "commit",
                    "time",
                    "uptime_s",
                    "dependencies"
                  ],
                  "additionalProperties": false,
                  "properties": {
                    "service": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok",
                        "error"
                      ]
                    },
                    "commit": {
                      "type": "string",
                      "description": "Git commit SHA deployed"
                    },
                    "time": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "uptime_s": {
                      "type": "integer",
                      "minimum": 0
                    },
                    "dependencies": {
                      "type": "object",
                      "required": [
                        "firebase",
                        "db"
                      ],
                      "additionalProperties": {
                        "type": "string"
                      },
                      "properties": {
                        "firebase": {
                          "type": "string",
                          "enum": [
                            "ok",
                            "degraded",
                            "down"
                          ]
                        },
                        "db": {
                          "type": "string",
                          "enum": [
                            "ok",
                            "degraded",
                            "down"
                          ]
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "default": {
                    "value": {
                      "service": "api",
                      "status": "ok",
                      "commit": "abc1234",
                      "time": "2025-10-29T12:00:00.000Z",
                      "uptime_s": 42,
                      "dependencies": {
                        "firebase": "ok",
                        "db": "ok"
                      }
                    }
                  },
                  "dependencyDown": {
                    "value": {
                      "service": "api",
                      "status": "error",
                      "commit": "abc1234",
                      "time": "2025-10-29T12:00:00.000Z",
                      "uptime_s": 42,
                      "dependencies": {
                        "firebase": "down",
                        "db": "ok"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
