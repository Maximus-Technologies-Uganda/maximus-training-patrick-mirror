name: Quality Gate

on:
  pull_request:
    branches: [ "**" ]

jobs:
  test-and-comment-coverage:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install deps
        run: npm ci

      - name: Run tests (all apps)
        run: npm test --silent

      - name: Install app devDependencies for Jest
        run: |
          npm --prefix quote install --no-audit --no-fund --silent
          npm --prefix expense install --no-audit --no-fund --silent
          npm --prefix stopwatch install --no-audit --no-fund --silent
          npm --prefix todo install --no-audit --no-fund --silent

      - name: Run Jest in each app to generate coverage summaries
        run: |
          npm --prefix quote test --silent || true
          npm --prefix expense test --silent || true
          npm --prefix stopwatch test --silent || true
          npm --prefix todo test --silent || true
      
      - name: Build coverage HTML index
        run: |
          node -e "
          const fs = require('fs');
          const path = require('path');
          const apps = ['quote','expense','stopwatch','todo'];
          const outDir = path.join(process.cwd(), 'coverage-report');
          fs.mkdirSync(outDir, { recursive: true });
          function copyDir(src, dest){
            if (!fs.existsSync(src)) return false;
            fs.mkdirSync(dest, { recursive: true });
            for (const entry of fs.readdirSync(src)){
              const s = path.join(src, entry);
              const d = path.join(dest, entry);
              const st = fs.statSync(s);
              if (st.isDirectory()) copyDir(s, d); else fs.copyFileSync(s, d);
            }
            return true;
          }
          const links = [];
          for (const app of apps){
            const src = path.join(process.cwd(), app, 'coverage', 'lcov-report');
            const dest = path.join(outDir, app);
            const ok = copyDir(src, dest);
            if (ok) links.push({ app, href: `${app}/index.html` });
          }
          const html = `<!doctype html>\n<html><head><meta charset=\"utf-8\"><title>Coverage Report</title></head><body>\n<h1>Coverage Report Index</h1>\n<ul>\n${links.map(l=>`<li><a href=\"${l.href}\">${l.app}</a></li>`).join('\n')}\n</ul>\n</body></html>`;
          fs.writeFileSync(path.join(outDir, 'index.html'), html);
          console.log('Wrote coverage-report/index.html');
          "

      - name: Upload coverage HTML artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage-report
      - name: Aggregate coverage summaries
        id: coverage
        run: |
          node -e "
          const fs = require('fs');
          const path = require('path');
          const apps = ['quote','expense','stopwatch','todo'];
          function readSummary(app){
            const p = path.join(process.cwd(), app, 'coverage', 'coverage-summary.json');
            if (!fs.existsSync(p)) return null;
            try { return JSON.parse(fs.readFileSync(p, 'utf8')); } catch { return null; }
          }
          function pct(s){
            if (!s || !s.total || !s.total.lines) return 'N/A';
            return String(s.total.lines.pct) + '%';
          }
          const rows = [['App','Lines']];
          for (const app of apps){
            const s = readSummary(app);
            rows.push([app, pct(s)]);
          }
          const pad = (arr, widths) => arr.map((c,i)=>String(c).padEnd(widths[i])).join(' | ');
          const widths = rows[0].map((_,i)=>Math.max(...rows.map(r=>String(r[i]).length)));
          let table = `| ${pad(rows[0], widths)} |\n| ${widths.map(w=>'-'.repeat(w)).join(' | ')} |\n`;
          for (let i=1;i<rows.length;i++){ table += `| ${pad(rows[i], widths)} |\n`; }
          fs.writeFileSync('coverage-table.md', table);
          console.log(table);
          "

      - name: Comment coverage on PR
        if: github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: coverage-report
          path: coverage-table.md

name: Quality Gate (informational)

on:
  pull_request:

jobs:
  discover:
    name: Discover app folders
    runs-on: ubuntu-latest
    outputs:
      apps: ${{ steps.scan.outputs.apps }}
    steps:
      - uses: actions/checkout@v4
      - name: Scan for app directories
        id: scan
        shell: bash
        run: |
          set -e
          apps=$(node -e "const fs=require('fs');const skip=new Set(['.git','.github','docs','helpers','labs','repos','node_modules']);const a=fs.readdirSync('.').filter(d=>{try{if(skip.has(d)||d.startsWith('.'))return false;const s=fs.statSync(d);if(!s.isDirectory())return false;return fs.existsSync(`${d}/package.json`)||(fs.existsSync(`${d}/src`)&&fs.existsSync(`${d}/tests`))||fs.existsSync(`${d}/tests`);}catch(e){return false;}});process.stdout.write(JSON.stringify(a));")
          [ -z "$apps" ] && apps="[]"
          echo "apps=$apps" >> "$GITHUB_OUTPUT"
          echo "Discovered apps: $apps"

  per_app:
    name: Per-app gate
    needs: discover
    if: ${{ (fromJSON(needs.discover.outputs.apps || '[]')).length > 0 }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    strategy:
      fail-fast: false
      matrix:
        app: ${{ fromJSON(needs.discover.outputs.apps) }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install (best-effort)
        shell: bash
        run: |
          APP="${{ matrix.app }}"
          (cd "$APP" && npm ci) || (cd "$APP" && npm install) || true

      - name: Jest with coverage (best-effort)
        shell: bash
        run: |
          APP="${{ matrix.app }}"
          # Ensure json-summary is produced for downstream tools
          (cd "$APP" && npx jest --coverage --coverageReporters=text --coverageReporters=json-summary) || echo "$APP: jest missing or tests failed; continuing"
          # Collect coverage pct if available
          mkdir -p gate
          node -e "
            const fs=require('fs'), p='${{ matrix.app }}/coverage/coverage-summary.json';
            let pct=null;
            if(fs.existsSync(p)){
              try{ const j=JSON.parse(fs.readFileSync(p,'utf8')); pct = (j.total && j.total.statements && j.total.statements.pct) || null; }catch(e){}
            }
            const out={ app:'${{ matrix.app }}', coveragePct:pct, coveragePresent: fs.existsSync('${{ matrix.app }}/coverage') };
            fs.writeFileSync('gate/${{ matrix.app }}.json', JSON.stringify(out));
          "

      - name: Post PR comment â€“ Code Coverage Summary (best-effort)
        if: github.event_name == 'pull_request'
        uses: davelosert/jest-coverage-report-action@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          working-directory: ${{ matrix.app }}
          test-script: npx jest --coverage --coverageReporters=text --coverageReporters=json-summary
          title: Code Coverage Summary
      - name: Upload gate result
        uses: actions/upload-artifact@v4
        with:
          name: gate-${{ matrix.app }}
          path: gate/${{ matrix.app }}.json

  summarize:
    name: Summarize Quality Gate
    needs: [discover, per_app]
    if: ${{ always() }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: _gate
          merge-multiple: true
        continue-on-error: true

      - name: Build summary
        shell: bash
        run: |
          echo "### Quality Gate (informational)" >> $GITHUB_STEP_SUMMARY
          if [ ! -d "_gate" ]; then
            echo "No per-app artifacts found. (If no apps exist, this is expected.)" >> $GITHUB_STEP_SUMMARY
            exit 0
          fi
          node - <<'NODE'
          const fs=require('fs'), path=require('path');
          const base='_gate';
          const files = fs.existsSync(base) ? fs.readdirSync(base).flatMap(d=>{
            const p=path.join(base,d);
            if(fs.statSync(p).isDirectory()){
              return fs.readdirSync(p).map(f=>path.join(p,f));
            } else return [p];
          }).filter(f=>f.endsWith('.json')) : [];
          let rows=[], pass=true;
          for(const f of files){
            try{
              const j=JSON.parse(fs.readFileSync(f,'utf8'));
              const has = !!j.coveragePresent;
              const pct = j.coveragePct==null ? 'n/a' : `${j.coveragePct}%`;
              rows.push({app:j.app, coverage: has?'present':'absent', pct});
              if(!has) pass=false;
            }catch(e){}
          }
          const hdr='| App | Coverage | % |\n|---|---|---|';
          const body=rows.map(r=>`| ${r.app} | ${r.coverage} | ${r.pct} |`).join('\n');
          const verdict = pass ? 'PASS' : 'FAIL';
          const md = `**Gate:** ${verdict} (informational)\n\n${hdr}\n${body || '|(none)| | |'}`;
          fs.writeFileSync('gate-summary.md', md);
          console.log(md);
          NODE
          echo "" >> $GITHUB_STEP_SUMMARY
          cat gate-summary.md >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "_Note: This gate never blocks merges. Improve coverage over time._" >> $GITHUB_STEP_SUMMARY