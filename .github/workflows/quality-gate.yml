name: Quality Gate

on:
  push:
    paths:
      - 'frontend/**'
      - 'api/**'
      - '.github/workflows/quality-gate.yml'
  pull_request:
    paths:
      - 'frontend/**'
      - 'api/**'
      - '.github/workflows/quality-gate.yml'

jobs:
  frontend-coverage:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'

      - name: Install frontend deps (npm ci)
        working-directory: frontend
        run: npm ci

      - name: Run frontend tests with coverage
        working-directory: frontend
        run: npm run test:run --silent -- --coverage

      - name: Add coverage to job summary
        if: always()
        working-directory: frontend
        shell: bash
        run: |
          echo "### Frontend Coverage Summary" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo '```json' >> "$GITHUB_STEP_SUMMARY"
          if [ -f coverage/coverage-summary.json ]; then
            cat coverage/coverage-summary.json >> "$GITHUB_STEP_SUMMARY"
          else
            echo '{}' >> "$GITHUB_STEP_SUMMARY"
          fi
          echo '' >> "$GITHUB_STEP_SUMMARY"
          echo '```'

      - name: Read coverage summary
        id: coverage
        run: |
          node - <<'NODE'
          const fs = require('fs');
          const path = require('path');
          const summaryPath = path.join(process.cwd(), 'frontend', 'coverage', 'coverage-summary.json');
          if (!fs.existsSync(summaryPath)) {
            console.error('ERROR: Coverage summary not found at frontend/coverage/coverage-summary.json. Ensure Vitest runs with coverage.');
            try {
              console.log('Listing frontend/coverage directory for diagnostics:');
              console.log(fs.readdirSync(path.join(process.cwd(), 'frontend', 'coverage')).join('\n'));
            } catch (e) {
              console.log('No coverage directory present.');
            }
            process.exit(1);
          }
          let summary = null;
          try { summary = JSON.parse(fs.readFileSync(summaryPath, 'utf8')); }
          catch (e) {
            console.error('ERROR: Failed to parse frontend/coverage/coverage-summary.json:', e.message);
            process.exit(1);
          }
          function statementsPct(summary){
            if (!summary || !summary.total || !summary.total.statements) return 'no files collected';
            const t = summary.total.statements;
            if (typeof t.total === 'number' && t.total === 0) return 'no files collected';
            if (typeof t.pct === 'number') return String(t.pct) + '%';
            return 'no files collected';
          }
          const rows = [['Target','Statements %'], ['Frontend', statementsPct(summary)]];
          const pad = (arr, widths) => arr.map((c,i)=>String(c).padEnd(widths[i])).join(' | ');
          const widths = rows[0].map((_,i)=>Math.max(...rows.map(r=>String(r[i]).length)));
          let table = `| ${pad(rows[0], widths)} |\n| ${widths.map(w=>'-'.repeat(w)).join(' | ')} |\n`;
          for (let i=1;i<rows.length;i++){ table += `| ${pad(rows[i], widths)} |\n`; }
          fs.writeFileSync('coverage-table.md', table);
          console.log(table);
          NODE

      - name: Comment coverage on PR
        if: github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: coverage-report
          path: coverage-table.md

  api-coverage:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'api/package-lock.json'

      - name: Install API deps (npm ci, omit optional)
        working-directory: api
        run: npm ci --omit=optional

      - name: Run API tests with coverage (in-memory repo)
        working-directory: api
        env:
          POSTS_REPOSITORY: inmemory
        run: npm test -- --coverage --coverageReporters=lcov --coverageReporters=json-summary --silent

      - name: Add coverage to job summary
        if: always()
        working-directory: api
        shell: bash
        run: |
          echo "### API Coverage Summary" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo '```json' >> "$GITHUB_STEP_SUMMARY"
          if [ -f coverage/coverage-summary.json ]; then
            cat coverage/coverage-summary.json >> "$GITHUB_STEP_SUMMARY"
          else
            echo '{}' >> "$GITHUB_STEP_SUMMARY"
          fi
          echo '' >> "$GITHUB_STEP_SUMMARY"
          echo '```'

      - name: Read coverage summary
        id: api_coverage
        run: |
          node - <<'NODE'
          const fs = require('fs');
          const path = require('path');
          const summaryPath = path.join(process.cwd(), 'api', 'coverage', 'coverage-summary.json');
          if (!fs.existsSync(summaryPath)) {
            console.error('ERROR: Coverage summary not found at api/coverage/coverage-summary.json. Ensure Jest runs with coverage.');
            try {
              console.log('Listing api/coverage directory for diagnostics:');
              console.log(fs.readdirSync(path.join(process.cwd(), 'api', 'coverage')).join('\n'));
            } catch (e) {
              console.log('No coverage directory present.');
            }
            process.exit(1);
          }
          let summary = null;
          try { summary = JSON.parse(fs.readFileSync(summaryPath, 'utf8')); }
          catch (e) {
            console.error('ERROR: Failed to parse api/coverage/coverage-summary.json:', e.message);
            process.exit(1);
          }
          function statementsPct(summary){
            if (!summary || !summary.total || !summary.total.statements) return 'no files collected';
            const t = summary.total.statements;
            if (typeof t.total === 'number' && t.total === 0) return 'no files collected';
            if (typeof t.pct === 'number') return String(t.pct) + '%';
            return 'no files collected';
          }
          const rows = [['Target','Statements %'], ['API', statementsPct(summary)]];
          const pad = (arr, widths) => arr.map((c,i)=>String(c).padEnd(widths[i])).join(' | ');
          const widths = rows[0].map((_,i)=>Math.max(...rows.map(r=>String(r[i]).length)));
          let table = `| ${pad(rows[0], widths)} |\n| ${widths.map(w=>'-'.repeat(w)).join(' | ')} |\n`;
          for (let i=1;i<rows.length;i++){ table += `| ${pad(rows[i], widths)} |\n`; }
          fs.writeFileSync('api-coverage-table.md', table);
          console.log(table);
          NODE

      - name: Comment coverage on PR
        if: github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: api-coverage-report
          path: api-coverage-table.md