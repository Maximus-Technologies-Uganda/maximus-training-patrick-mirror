name: Quality Gate (informational)

on:
  pull_request:

jobs:
  discover:
    name: Discover app folders
    runs-on: ubuntu-latest
    outputs:
      apps: ${{ steps.scan.outputs.apps }}
    steps:
      - uses: actions/checkout@v4
      - name: Scan for app directories
        id: scan
        shell: bash
        run: |
          set -e
          apps=$(node -e "const fs=require('fs');const skip=new Set(['.git','.github','docs','helpers','labs','repos','node_modules']);const a=fs.readdirSync('.').filter(d=>{try{if(skip.has(d)||d.startsWith('.'))return false;const s=fs.statSync(d);if(!s.isDirectory())return false;return fs.existsSync(`${d}/package.json`)||(fs.existsSync(`${d}/src`)&&fs.existsSync(`${d}/tests`))||fs.existsSync(`${d}/tests`);}catch(e){return false;}});process.stdout.write(JSON.stringify(a));")
          [ -z "$apps" ] && apps="[]"
          echo "apps=$apps" >> "$GITHUB_OUTPUT"
          echo "Discovered apps: $apps"

  per_app:
    name: Per-app gate
    needs: discover
    if: ${{ (fromJSON(needs.discover.outputs.apps || '[]')).length > 0 }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        app: ${{ fromJSON(needs.discover.outputs.apps) }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install (best-effort)
        shell: bash
        run: |
          APP="${{ matrix.app }}"
          (cd "$APP" && npm ci) || (cd "$APP" && npm install) || true

      - name: Jest with coverage (best-effort)
        shell: bash
        run: |
          APP="${{ matrix.app }}"
          (cd "$APP" && npx jest --coverage) || echo "$APP: jest missing or tests failed; continuing"
          # Collect coverage pct if available
          mkdir -p gate
          node -e "
            const fs=require('fs'), p='${{ matrix.app }}/coverage/coverage-summary.json';
            let pct=null;
            if(fs.existsSync(p)){
              try{ const j=JSON.parse(fs.readFileSync(p,'utf8')); pct = (j.total && j.total.statements && j.total.statements.pct) || null; }catch(e){}
            }
            const out={ app:'${{ matrix.app }}', coveragePct:pct, coveragePresent: fs.existsSync('${{ matrix.app }}/coverage') };
            fs.writeFileSync('gate/${{ matrix.app }}.json', JSON.stringify(out));
          "

      - name: Post PR comment â€“ Code Coverage Summary (best-effort)
        if: github.event_name == 'pull_request'
        uses: ArtiomTr/jest-coverage-report-action@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          coverage-files: |
            **/coverage/coverage-summary.json
          title: Code Coverage Summary
          skip-step-if-no-files-found: true
      - name: Upload gate result
        uses: actions/upload-artifact@v4
        with:
          name: gate-${{ matrix.app }}
          path: gate/${{ matrix.app }}.json

  summarize:
    name: Summarize Quality Gate
    needs: [discover, per_app]
    if: ${{ always() }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: _gate
          merge-multiple: true
        continue-on-error: true

      - name: Build summary
        shell: bash
        run: |
          echo "### Quality Gate (informational)" >> $GITHUB_STEP_SUMMARY
          if [ ! -d "_gate" ]; then
            echo "No per-app artifacts found. (If no apps exist, this is expected.)" >> $GITHUB_STEP_SUMMARY
            exit 0
          fi
          node - <<'NODE'
          const fs=require('fs'), path=require('path');
          const base='_gate';
          const files = fs.existsSync(base) ? fs.readdirSync(base).flatMap(d=>{
            const p=path.join(base,d);
            if(fs.statSync(p).isDirectory()){
              return fs.readdirSync(p).map(f=>path.join(p,f));
            } else return [p];
          }).filter(f=>f.endsWith('.json')) : [];
          let rows=[], pass=true;
          for(const f of files){
            try{
              const j=JSON.parse(fs.readFileSync(f,'utf8'));
              const has = !!j.coveragePresent;
              const pct = j.coveragePct==null ? 'n/a' : `${j.coveragePct}%`;
              rows.push({app:j.app, coverage: has?'present':'absent', pct});
              if(!has) pass=false;
            }catch(e){}
          }
          const hdr='| App | Coverage | % |\n|---|---|---|';
          const body=rows.map(r=>`| ${r.app} | ${r.coverage} | ${r.pct} |`).join('\n');
          const verdict = pass ? 'PASS' : 'FAIL';
          const md = `**Gate:** ${verdict} (informational)\n\n${hdr}\n${body || '|(none)| | |'}`;
          fs.writeFileSync('gate-summary.md', md);
          console.log(md);
          NODE
          echo "" >> $GITHUB_STEP_SUMMARY
          cat gate-summary.md >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "_Note: This gate never blocks merges. Improve coverage over time._" >> $GITHUB_STEP_SUMMARY