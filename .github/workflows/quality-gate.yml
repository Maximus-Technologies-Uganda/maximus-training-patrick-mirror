name: Quality Gate

on:
  pull_request:
    branches: [ "**" ]

jobs:
  test-and-comment-coverage:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install deps
        run: npm ci

      - name: Run tests (all apps)
        run: npm test --silent

      - name: Install app devDependencies for Jest
        run: |
          npm --prefix quote install --no-audit --no-fund --silent
          npm --prefix expense install --no-audit --no-fund --silent
          npm --prefix stopwatch install --no-audit --no-fund --silent
          npm --prefix todo install --no-audit --no-fund --silent

      - name: Run Jest in each app to generate coverage summaries
        run: |
          npm --prefix quote test --silent || true
          npm --prefix expense test --silent || true
          npm --prefix stopwatch test --silent || true
          npm --prefix todo test --silent || true
      
      - name: Build coverage HTML index
        run: |
          node -e "
          const fs = require('fs');
          const path = require('path');
          const apps = ['quote','expense','stopwatch','todo'];
          const outDir = path.join(process.cwd(), 'coverage-report');
          fs.mkdirSync(outDir, { recursive: true });
          function copyDir(src, dest){
            if (!fs.existsSync(src)) return false;
            fs.mkdirSync(dest, { recursive: true });
            for (const entry of fs.readdirSync(src)){
              const s = path.join(src, entry);
              const d = path.join(dest, entry);
              const st = fs.statSync(s);
              if (st.isDirectory()) copyDir(s, d); else fs.copyFileSync(s, d);
            }
            return true;
          }
          const links = [];
          for (const app of apps){
            const src = path.join(process.cwd(), app, 'coverage', 'lcov-report');
            const dest = path.join(outDir, app);
            const ok = copyDir(src, dest);
            if (ok) links.push({ app, href: `${app}/index.html` });
          }
          const html = `<!doctype html>\n<html><head><meta charset=\"utf-8\"><title>Coverage Report</title></head><body>\n<h1>Coverage Report Index</h1>\n<ul>\n${links.map(l=>`<li><a href=\"${l.href}\">${l.app}</a></li>`).join('\n')}\n</ul>\n</body></html>`;
          fs.writeFileSync(path.join(outDir, 'index.html'), html);
          console.log('Wrote coverage-report/index.html');
          "

      - name: Upload coverage HTML artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage-report
      - name: Aggregate coverage summaries
        id: coverage
        run: |
          node -e "
          const fs = require('fs');
          const path = require('path');
          const apps = ['quote','expense','stopwatch','todo'];
          function readSummaryAt(p){
            if (!fs.existsSync(p)) return null;
            try { return JSON.parse(fs.readFileSync(p, 'utf8')); } catch { return null; }
          }
          function statementsPct(summary){
            if (!summary || !summary.total || !summary.total.statements) return 'no files collected';
            const t = summary.total.statements;
            if (typeof t.total === 'number' && t.total === 0) return 'no files collected';
            if (typeof t.pct === 'number') return String(t.pct) + '%';
            return 'no files collected';
          }
          const rows = [['Target','Statements %']];
          for (const app of apps){
            const s = readSummaryAt(path.join(process.cwd(), app, 'coverage', 'coverage-summary.json'));
            rows.push([app, statementsPct(s)]);
          }
          // Frontend row (Vitest)
          const fsum = readSummaryAt(path.join(process.cwd(), 'frontend', 'coverage', 'coverage-summary.json'));
          rows.push(['Frontend', statementsPct(fsum)]);
          const pad = (arr, widths) => arr.map((c,i)=>String(c).padEnd(widths[i])).join(' | ');
          const widths = rows[0].map((_,i)=>Math.max(...rows.map(r=>String(r[i]).length)));
          let table = `| ${pad(rows[0], widths)} |\n| ${widths.map(w=>'-'.repeat(w)).join(' | ')} |\n`;
          for (let i=1;i<rows.length;i++){ table += `| ${pad(rows[i], widths)} |\n`; }
          fs.writeFileSync('coverage-table.md', table);
          console.log(table);
          "

      - name: Comment coverage on PR
        if: github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: coverage-report
          path: coverage-table.md