name: Quality Gate

on:
  push:
    paths:
      - 'frontend/**'
      - 'frontend-next/**'
      - 'api/**'
      - '.github/workflows/quality-gate.yml'
  pull_request:
    paths:
      - 'frontend/**'
      - 'frontend-next/**'
      - 'api/**'
      - '.github/workflows/quality-gate.yml'

jobs:
  readme-link-check:
    name: README link check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install dependencies
        run: npm install --no-audit --no-fund --ignore-scripts
      - name: Link check README
        run: node scripts/link-check.js README.md
  lint-workflows:
    name: Lint GitHub workflows
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: reviewdog/action-actionlint@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          actionlint_flags: ".github/workflows/*.yml"
          reporter: github-check
          fail_level: error
  install-root-deps:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: package-lock.json
      - name: Install root dependencies
        shell: bash
        run: |
          set -e
          npm config set audit false --location=project
          npm config set fund false --location=project
          # Use npm install for better workspace compatibility
          echo "Installing root and workspace dependencies"
          npm install --no-audit --no-fund

  frontend-next-coverage:
    needs: install-root-deps
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      - name: Install dependencies
        shell: bash
        run: |
          set -e
          npm config set audit false --location=project
          npm config set fund false --location=project
          # Install root and workspace dependencies
          npm install --no-audit --no-fund
          # Ensure frontend-next has its dependencies
          cd frontend-next
          npm ci

      - name: Run frontend-next tests with coverage
        working-directory: frontend-next
        run: npm run test:ci

      - name: Upload frontend-next coverage artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-frontend-next
          path: |
            frontend-next/coverage/**

      - name: Add coverage to job summary
        if: always()
        working-directory: frontend-next
        shell: bash
        run: |
          {
            echo "### frontend-next Coverage"
            echo
            echo '```json'
            if [ -f coverage/coverage-summary.json ]; then
              cat coverage/coverage-summary.json
            else
              echo '{}'
            fi
            echo
            echo '```'
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Read coverage summary
        id: coverage_frontend_next
        run: |
          node - <<'NODE'
          const fs = require('fs');
          const path = require('path');
          const summaryPath = path.join(process.cwd(), 'frontend-next', 'coverage', 'coverage-summary.json');
          if (!fs.existsSync(summaryPath)) {
            console.error('ERROR: Coverage summary not found at frontend-next/coverage/coverage-summary.json. Ensure Vitest runs with coverage.');
            try {
              console.log('Listing frontend-next/coverage directory for diagnostics:');
              console.log(fs.readdirSync(path.join(process.cwd(), 'frontend-next', 'coverage')).join('\n'));
            } catch (e) {
              console.log('No coverage directory present.');
            }
            process.exit(1);
          }
          let summary = null;
          try { summary = JSON.parse(fs.readFileSync(summaryPath, 'utf8')); }
          catch (e) {
            console.error('ERROR: Failed to parse frontend/coverage/coverage-summary.json:', e.message);
            process.exit(1);
          }
          function statementsPct(summary){
            if (!summary || !summary.total || !summary.total.statements) return 'no files collected';
            const t = summary.total.statements;
            if (typeof t.total === 'number' && t.total === 0) return 'no files collected';
            if (typeof t.pct === 'number') return String(t.pct) + '%';
            return 'no files collected';
          }
          const rows = [['Target','Statements %'], ['frontend-next', statementsPct(summary)]];
          const pad = (arr, widths) => arr.map((c,i)=>String(c).padEnd(widths[i])).join(' | ');
          const widths = rows[0].map((_,i)=>Math.max(...rows.map(r=>String(r[i]).length)));
          let table = `| ${pad(rows[0], widths)} |\n| ${widths.map(w=>'-'.repeat(w)).join(' | ')} |\n`;
          for (let i=1;i<rows.length;i++){ table += `| ${pad(rows[i], widths)} |\n`; }
          fs.writeFileSync('coverage-table.md', table);
          console.log(table);
          NODE

      - name: Comment coverage on PR
        if: github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: coverage-report-frontend-next
          path: coverage-table.md

  api-coverage:
    needs: install-root-deps
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      - name: Install dependencies
        shell: bash
        run: |
          set -e
          npm config set audit false --location=project
          npm config set fund false --location=project
          # Install root and workspace dependencies
          npm install --no-audit --no-fund
          # Ensure API has its dependencies
          cd api
          npm ci

      - name: Debug available api scripts
        run: |
          node -e "const p=require('./api/package.json');console.log('scripts',p.scripts)" | cat
          ls -la api
          ls -la api/node_modules/.bin || true
          node -e "console.log(process.cwd())"

      - name: Run API tests with coverage (in-memory repo)
        working-directory: api
        env:
          POSTS_REPOSITORY: inmemory
        run: npm run test:ci

      - name: Upload API coverage artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-api
          path: |
            api/coverage/**

      - name: Add coverage to job summary
        if: always()
        working-directory: api
        shell: bash
        run: |
          {
            echo "### API Coverage Summary"
            echo
            echo '```json'
            if [ -f coverage/coverage-summary.json ]; then
              cat coverage/coverage-summary.json
            else
              echo '{}'
            fi
            echo
            echo '```'
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Read coverage summary
        id: api_coverage
        run: |
          node - <<'NODE'
          const fs = require('fs');
          const path = require('path');
          const summaryPath = path.join(process.cwd(), 'api', 'coverage', 'coverage-summary.json');
          if (!fs.existsSync(summaryPath)) {
            console.error('ERROR: Coverage summary not found at api/coverage/coverage-summary.json. Ensure Jest runs with coverage.');
            try {
              console.log('Listing api/coverage directory for diagnostics:');
              console.log(fs.readdirSync(path.join(process.cwd(), 'api', 'coverage')).join('\n'));
            } catch (e) {
              console.log('No coverage directory present.');
            }
            process.exit(1);
          }
          let summary = null;
          try { summary = JSON.parse(fs.readFileSync(summaryPath, 'utf8')); }
          catch (e) {
            console.error('ERROR: Failed to parse api/coverage/coverage-summary.json:', e.message);
            process.exit(1);
          }
          function statementsPct(summary){
            if (!summary || !summary.total || !summary.total.statements) return 'no files collected';
            const t = summary.total.statements;
            if (typeof t.total === 'number' && t.total === 0) return 'no files collected';
            if (typeof t.pct === 'number') return String(t.pct) + '%';
            return 'no files collected';
          }
          const rows = [['Target','Statements %'], ['API', statementsPct(summary)]];
          const pad = (arr, widths) => arr.map((c,i)=>String(c).padEnd(widths[i])).join(' | ');
          const widths = rows[0].map((_,i)=>Math.max(...rows.map(r=>String(r[i]).length)));
          let table = `| ${pad(rows[0], widths)} |\n| ${widths.map(w=>'-'.repeat(w)).join(' | ')} |\n`;
          for (let i=1;i<rows.length;i++){ table += `| ${pad(rows[i], widths)} |\n`; }
          fs.writeFileSync('api-coverage-table.md', table);
          console.log(table);
          NODE

      - name: Comment coverage on PR
        if: github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: api-coverage-report
          path: api-coverage-table.md

  aggregate-coverage:
    name: Aggregate monorepo coverage and summarize
    if: ${{ always() }}
    runs-on: ubuntu-latest
    needs: [frontend-next-coverage, api-coverage]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install root deps for scripts
        run: |
          npm config set audit false --location=project
          npm config set fund false --location=project
          npm install --no-audit --no-fund --omit=optional

      - name: Download coverage artifacts from prior jobs
        uses: actions/download-artifact@v4
        with:
          path: _dl
        continue-on-error: true

      - name: Download a11y artifact (frontend-next)
        uses: actions/download-artifact@v4
        with:
          name: a11y-frontend-next
          path: _dl/a11y-frontend-next
        continue-on-error: true

      - name: Download contract artifact (frontend-next)
        uses: actions/download-artifact@v4
        with:
          name: contract-frontend-next
          path: _dl/contract-frontend-next
        continue-on-error: true

      - name: Move downloaded coverage into expected locations
        shell: bash
        run: |
          # Place any downloaded coverage into their package directories if needed
          # We only rely on local runs here; if artifacts are absent, we proceed.
          mkdir -p frontend-next/coverage api/coverage || true
          # If upstream jobs also wrote coverage directly in the workspace, nothing to do
          # Otherwise, attempt to copy from artifacts
          if [ -d "_dl/coverage-frontend-next/frontend-next/coverage" ]; then
            cp -R "_dl/coverage-frontend-next/frontend-next/coverage/." "frontend-next/coverage/" || true
          fi
          if [ -d "_dl/coverage-api/api/coverage" ]; then
            cp -R "_dl/coverage-api/api/coverage/." "api/coverage/" || true
          fi

      - name: Normalize coverage (monorepo)
        run: npm run coverage:normalize

      - name: Summarize coverage totals (monorepo and frontend-next)
        if: always()
        shell: bash
        run: |
          {
            echo "### Monorepo Coverage Totals"
            echo
            echo '```json'
            if [ -f coverage/coverage-summary.json ]; then
              cat coverage/coverage-summary.json
            else
              echo '{"note":"no aggregated coverage found"}'
            fi
            echo
            echo '```'
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Summarize a11y result (frontend-next)
        if: always()
        shell: bash
        run: |
          node - <<'NODE'
          const fs = require('fs');
          const path = require('path');
          const summaryFile = process.env.GITHUB_STEP_SUMMARY;
          const repo = process.env.GITHUB_REPOSITORY;
          const runId = process.env.GITHUB_RUN_ID;
          const artifactUrl = `https://github.com/${repo}/actions/runs/${runId}`;

          const candidates = [
            path.join(process.cwd(), '_dl', 'a11y-frontend-next', 'a11y', 'report.json'),
            path.join(process.cwd(), '_dl', 'a11y', 'report.json'),
            path.join(process.cwd(), 'a11y', 'report.json')
          ];
          const jsonPath = candidates.find(p => fs.existsSync(p));

          let violationsCount = null;
          if (jsonPath) {
            try {
              const data = JSON.parse(fs.readFileSync(jsonPath, 'utf8'));
              violationsCount = Array.isArray(data.violations) ? data.violations.length : null;
            } catch (e) {
              violationsCount = null;
            }
          }

          const lines = [];
          lines.push('### frontend-next A11y Result');
          if (violationsCount === null) {
            lines.push('_No a11y JSON report found; artifact or file missing._');
            lines.push(`Artifact: [a11y-frontend-next](${artifactUrl})`);
          } else {
            const status = violationsCount === 0 ? 'PASS' : 'FAIL';
            const label = violationsCount === 1 ? 'violation' : 'violations';
            lines.push(`${status}: ${violationsCount} ${label}`);
            lines.push(`Full HTML report: [a11y-frontend-next](${artifactUrl}) (open index.html inside artifact)`);
          }
          fs.appendFileSync(summaryFile, lines.join('\n') + '\n');
          NODE

      - name: Summarize contract result (frontend-next)
        if: always()
        shell: bash
        run: |
          node - <<'NODE'
          const fs = require('fs');
          const path = require('path');
          const summaryFile = process.env.GITHUB_STEP_SUMMARY;
          const repo = process.env.GITHUB_REPOSITORY;
          const runId = process.env.GITHUB_RUN_ID;
          const artifactUrl = `https://github.com/${repo}/actions/runs/${runId}`;

          const candidates = [
            path.join(process.cwd(), '_dl', 'contract-frontend-next', 'contract', 'report.json'),
            path.join(process.cwd(), '_dl', 'contract', 'report.json'),
            path.join(process.cwd(), 'contract', 'report.json')
          ];
          const jsonPath = candidates.find(p => fs.existsSync(p));

          let passed = null, failed = null;
          if (jsonPath) {
            try {
              const data = JSON.parse(fs.readFileSync(jsonPath, 'utf8'));
              // Heuristic: treat breakingMismatches > 0 as a failure of 1 check, else pass 1
              if (typeof data.breakingMismatches === 'number') {
                failed = data.breakingMismatches > 0 ? 1 : 0;
                passed = data.breakingMismatches > 0 ? 0 : 1;
              }
            } catch (e) {
              passed = null; failed = null;
            }
          }

          const lines = [];
          lines.push('### frontend-next Contract Result');
          if (passed === null || failed === null) {
            lines.push('_No contract JSON report found; artifact or file missing._');
            lines.push(`Artifact: [contract-frontend-next](${artifactUrl})`);
          } else {
            const status = failed === 0 ? 'PASS' : 'FAIL';
            lines.push(`${status}: ${passed} passed, ${failed} failed`);
            lines.push(`Full report: [contract-frontend-next](${artifactUrl})`);
          }
          fs.appendFileSync(summaryFile, lines.join('\n') + '\n');
          NODE

          {
            echo
            echo "### frontend-next A11y Summary"
            echo
            if [ -f a11y/report.json ]; then
              echo '```json'
              cat a11y/report.json || true
              echo
              echo '```'
            else
              echo '_No a11y report found (a11y/report.json)_'
            fi

            echo
            echo "### frontend-next Contract Summary"
            echo
            if [ -f contract/report.json ]; then
              echo '```json'
              cat contract/report.json || true
              echo
              echo '```'
            else
              echo '_No contract report found (contract/report.json)_'
            fi

            echo
            echo "### frontend-next Coverage Totals"
            echo
            echo '```json'
            if [ -f frontend-next/coverage/coverage-summary.json ]; then
              cat frontend-next/coverage/coverage-summary.json
            else
              echo '{"note":"no frontend-next coverage found"}'
            fi
            echo
            echo '```'
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Append frontend-next coverage totals table
        if: always()
        shell: bash
        run: |
          node frontend-next/scripts/print-coverage-summary.mjs frontend-next >> "$GITHUB_STEP_SUMMARY" || true

  spectral-lint:
    name: Spectral Lint (OpenAPI)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Lint OpenAPI with Spectral
        run: npx -y @stoplight/spectral-cli@6 lint specs/spec/007-week-6-final-punchlist/contracts/openapi.yaml --ruleset specs/spec/007-week-6-final-punchlist/contracts/.spectral.yaml --fail-severity=error

  latency-snapshot:
    name: Latency Snapshot (non-gating)
    if: ${{ always() }}
    needs: [aggregate-coverage]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Resolve Target URL
        shell: bash
        run: |
          set -euo pipefail
          VAR_URL="${{ vars['PROD_API_URL'] }}"
          SEC_URL="${{ secrets['PROD_API_URL'] }}"
          if [ -n "$VAR_URL" ]; then
            echo "TARGET_API_URL=$VAR_URL" >> "$GITHUB_ENV"
            exit 0
          fi
          if [ -n "$SEC_URL" ]; then
            echo "TARGET_API_URL=$SEC_URL" >> "$GITHUB_ENV"
            exit 0
          fi
          {
            echo "### Latency Snapshot (/auth/login)"
            echo
            echo "_No TARGET_API_URL configured (vars or secrets). Skipping latency snapshot._"
          } >> "$GITHUB_STEP_SUMMARY"
          exit 0

      - name: Measure /auth/login p50/p95 latency
        shell: bash
        continue-on-error: true
        env:
          TARGET_API_URL: ${{ env.TARGET_API_URL }}
          REQUESTS: '20'
          USERNAME: 'alice'
          PASSWORD: 'correct-password'
        run: |
          set -euo pipefail
          URL="${TARGET_API_URL:-}"
          if [ -z "$URL" ]; then
            {
              echo "### Latency Snapshot (/auth/login)"
              echo
              echo "_TARGET_API_URL not set; skipping latency snapshot._"
            } >> "$GITHUB_STEP_SUMMARY"
            exit 0
          fi

          ENDPOINT="${URL%/}/auth/login"
          COUNT="${REQUESTS:-20}"
          tmpfile=$(mktemp)
          for i in $(seq 1 "$COUNT"); do
            t=$(curl -s -o /dev/null -w '%{time_total}' -X POST "$ENDPOINT" \
                 -H 'Content-Type: application/json' \
                 --data "{\"username\":\"$USERNAME\",\"password\":\"$PASSWORD\"}") || t="0"
            echo "$t" >> "$tmpfile"
          done

          msfile=$(mktemp)
          awk '{printf "%.3f\n", $1*1000}' "$tmpfile" | sort -n > "$msfile"
          n=$(wc -l < "$msfile" | tr -d ' ')
          if [ "$n" -eq 0 ]; then
            {
              echo "### Latency Snapshot (/auth/login)"
              echo
              echo "_No samples collected._"
            } >> "$GITHUB_STEP_SUMMARY"
            exit 0
          fi

          if [ $((n%2)) -eq 1 ]; then
            mid=$(( (n+1)/2 ))
            p50=$(awk "NR==$mid{print $1}" "$msfile")
          else
            mid1=$(( n/2 ))
            mid2=$(( mid1+1 ))
            v1=$(awk "NR==$mid1{print $1}" "$msfile")
            v2=$(awk "NR==$mid2{print $1}" "$msfile")
            p50=$(awk -v a="$v1" -v b="$v2" 'BEGIN{ printf "%.3f", (a+b)/2 }')
          fi

          rank=$(awk -v n="$n" 'BEGIN{ printf "%d", (n*0.95==int(n*0.95)) ? int(n*0.95) : int(n*0.95)+1 }')
          if [ "$rank" -lt 1 ]; then rank=1; fi
          if [ "$rank" -gt "$n" ]; then rank="$n"; fi
          p95=$(awk -v r="$rank" 'NR==r{print $1}' "$msfile")

          {
            echo "### Latency Snapshot (/auth/login)"
            echo
            echo "- Target: $ENDPOINT"
            echo "- Samples: $n"
            echo
            echo "| Metric | ms |"
            echo "| ------ | --- |"
            echo "| p50 | $p50 |"
            echo "| p95 | $p95 |"
          } >> "$GITHUB_STEP_SUMMARY"