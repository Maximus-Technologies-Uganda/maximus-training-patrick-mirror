name: Review Packet

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - 'patrick/**'   # adjust if you want fewer branches

jobs:
  discover:
    name: Discover app folders
    runs-on: ubuntu-latest
    outputs:
      apps: ${{ steps.scan.outputs.apps }}
    steps:
      - uses: actions/checkout@v4

      - name: Scan for app directories
        id: scan
        shell: bash
        run: |
          set -e
          apps=$(node -e "const fs=require('fs');const skip=new Set(['.git','.github','docs','helpers','labs','repos','node_modules']);const a=fs.readdirSync('.').filter(d=>{try{if(skip.has(d)||d.startsWith('.'))return false;const s=fs.statSync(d);if(!s.isDirectory())return false;return fs.existsSync(d+'/package.json')||(fs.existsSync(d+'/src')&&fs.existsSync(d+'/tests'))||fs.existsSync(d+'/tests');}catch(e){return false;}});process.stdout.write(JSON.stringify(a));")
          [ -z "$apps" ] && apps="[]"
          echo "apps=$apps" >> "$GITHUB_OUTPUT"
          echo "Discovered apps: $apps"
          {
            echo "### Discovered apps";
            echo "\`\`\`json"; echo "$apps"; echo "\`\`\`";
          } >> "$GITHUB_STEP_SUMMARY"

  per_app:
    name: Per-app tests & coverage
    needs: discover
    if: ${{ (fromJSON(needs.discover.outputs.apps || '[]')).length > 0 }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        app: ${{ fromJSON(needs.discover.outputs.apps) }}
    steps:
      - uses: actions/checkout@v4

      - name: Node setup
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Debug matrix app
        run: echo "Running per_app for ${{ matrix.app }}"

      - name: Install (best-effort)
        shell: bash
        run: |
          set -e
          APP="${{ matrix.app }}"
          if [ -d "$APP" ]; then
            (cd "$APP" && npm ci) || (cd "$APP" && npm install) || true
          fi

      - name: Jest coverage (best-effort)
        shell: bash
        run: |
          set -e
          APP="${{ matrix.app }}"
          if [ -d "$APP" ]; then
            (cd "$APP" && npx jest --coverage --coverageReporters=lcov --coverageReporters=json-summary) || echo "$APP: jest missing or tests failed; continuing"
            if [ -d "$APP/coverage" ]; then
              mkdir -p "stage/coverage-$APP"
              cp -R "$APP/coverage/." "stage/coverage-$APP/" || true
            fi
          fi

      - name: Upload per-app coverage
        if: ${{ hashFiles(format('{0}/coverage/**', matrix.app)) != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.app }}
          path: stage/coverage-${{ matrix.app }}/**

      - name: Upload per-app summary
        run: |
          APP="${{ matrix.app }}"
          echo "app=$APP" > "perapp-${APP}.txt"
          if [ -d "stage/coverage-${APP}" ]; then
            echo "coverage=present" >> "perapp-${APP}.txt"
          else
            echo "coverage=absent" >> "perapp-${APP}.txt"
          fi
        shell: bash
      - uses: actions/upload-artifact@v4
        with:
          name: perapp-${{ matrix.app }}
          path: perapp-${{ matrix.app }}.txt

  frontend:
    name: Frontend tests & coverage
    needs: discover
    if: ${{ contains(fromJSON(needs.discover.outputs.apps || '[]'), 'frontend') }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: npm
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run tests with coverage (Vitest)
        run: npm run test -- --coverage

      - name: Upload frontend coverage and sources
        uses: actions/upload-artifact@v4
        with:
          name: coverage-frontend
          if-no-files-found: error
          path: |
            frontend/coverage/coverage-summary.json
            frontend/coverage/lcov-report/**
            frontend/src/**
            frontend/tests/**
            frontend/package.json
            frontend/eslint.config.*
            frontend/vitest.config.*

  assemble:
    name: Assemble review packet
    needs: [discover, frontend]
    if: ${{ always() }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Node setup
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Generate review.md (env + commits + repo map)
        run: |
          echo "# Automated Review Packet" > review.md
          echo "## Environment" >> review.md
          (node -v && npm -v) >> review.md || echo "node/npm unavailable" >> review.md
          echo -e "\n## Commit Summary (20 most recent)" >> review.md
          git log -n 20 --pretty=format:'- %h %ad %an â€” %s' --date=short >> review.md
          echo -e "\n## Repo Map (depth=2)" >> review.md
          find . -maxdepth 2 -type d | sort | sed 's#^\./##' >> review.md
          echo -e "\n## Notes" >> review.md
          echo "- Best-effort run: missing tools will not fail the job; see summaries below." >> review.md

      - name: Debug apps passed to assemble
        env:
          APPS_JSON: ${{ needs.discover.outputs.apps }}
        run: |
          echo "APPS_JSON=${APPS_JSON:-<empty>}"
          echo "APPS length (parsed):" $(node -e "try{console.log(JSON.parse(process.env.APPS_JSON||'[]').length)}catch(e){console.log('parse-error')}")

      - name: Download all per-app artifacts
        uses: actions/download-artifact@v4
        with:
          path: _dl
          merge-multiple: true
          if-no-files-found: ignore
        continue-on-error: true

      - name: Consolidate coverage artifacts
        run: |
          mkdir -p review-artifacts
          # Move coverage artifacts to review-artifacts/coverage-<app>
          if [ -d "_dl" ]; then
            for d in _dl/coverage-*; do
              [ -d "$d" ] || continue
              APP_NAME=$(basename "$d" | sed 's/^coverage-//')
              mkdir -p "review-artifacts/coverage-$APP_NAME"
              cp -R "$d/." "review-artifacts/coverage-$APP_NAME/" || true
              # Flatten frontend paths so coverage files are at expected locations
              if [ "$APP_NAME" = "frontend" ]; then
                if [ -f "review-artifacts/coverage-frontend/frontend/coverage/coverage-summary.json" ]; then
                  mv "review-artifacts/coverage-frontend/frontend/coverage/coverage-summary.json" "review-artifacts/coverage-frontend/coverage-summary.json" || true
                fi
                if [ -d "review-artifacts/coverage-frontend/frontend/coverage/lcov-report" ]; then
                  rm -rf "review-artifacts/coverage-frontend/lcov-report"
                  mv "review-artifacts/coverage-frontend/frontend/coverage/lcov-report" "review-artifacts/coverage-frontend/lcov-report" || true
                fi
              fi
            done
          fi

      - name: Serial fallback (always run if no coverage artifacts found)
        shell: bash
        run: |
          set -e
          # Check if we have any coverage artifacts from matrix jobs
          COVERAGE_COUNT=$(find review-artifacts -name "coverage-*" -type d 2>/dev/null | wc -l || echo "0")
          if [ "$COVERAGE_COUNT" -gt 0 ]; then
            echo "Found $COVERAGE_COUNT coverage artifacts from matrix jobs. Skipping serial fallback."
            exit 0
          fi
          
          echo "No coverage artifacts found. Running serial fallback for all apps."
          APPS=$(node -e "const fs=require('fs');const skip=new Set(['.git','.github','docs','helpers','labs','repos','node_modules']);const a=fs.readdirSync('.').filter(d=>{try{if(skip.has(d)||d.startsWith('.'))return false;const s=fs.statSync(d);if(!s.isDirectory())return false;return fs.existsSync(d+'/package.json')||(fs.existsSync(d+'/src')&&fs.existsSync(d+'/tests'))||fs.existsSync(d+'/tests');}catch(e){return false;}});process.stdout.write(JSON.stringify(a));")
          export APPS_ARRAY="$APPS"
          echo "Locally discovered apps: $APPS_ARRAY"
          
          if [ "$APPS_ARRAY" = "[]" ]; then
            echo "No apps found locally either."
            echo -e "\n## App Test Summary (serial fallback)" >> review.md
            echo "No apps discovered." >> review.md
            exit 0
          fi
          
          mkdir -p review-artifacts
          for APP in $(node -e "const a=process.env.APPS_ARRAY;JSON.parse(a).forEach(x=>process.stdout.write(x+' '))"); do
            echo "---- $APP: install ----"
            (cd "$APP" && npm ci || npm install || true)
            echo "---- $APP: jest --coverage ----"
            (cd "$APP" && npx jest --coverage --coverageReporters=lcov --coverageReporters=json-summary) || echo "$APP: jest missing or tests failed; continuing"
            if [ -d "$APP/coverage" ]; then
              mkdir -p "review-artifacts/coverage-$APP"
              cp -R "$APP/coverage/." "review-artifacts/coverage-$APP/" || true
            fi
          done
          
          # No fallback summary here to avoid redundancy; final summary is appended later

      - name: Generate final summary and coverage index
        env:
          APPS_JSON: ${{ needs.discover.outputs.apps }}
        run: |
          # Build coverage index
          node - <<'NODE'
          const fs=require('fs');
          const base='review-artifacts';
          if(!fs.existsSync(base)) fs.mkdirSync(base,{recursive:true});
          const apps=fs.existsSync(base) ? fs.readdirSync(base).filter(d=>d.startsWith('coverage-')).map(d=>d.replace(/^coverage-/,'')) : [];
          let html='<!doctype html><meta charset="utf-8"><title>Coverage Index</title><h1>Coverage Index</h1>';
          if(!apps.length){ html+='<p>No coverage collected.</p>'; }
          else { html+='<ul>'+apps.map(a=>`<li><a href="./coverage-${a}/lcov-report/index.html">${a}</a></li>`).join('')+'</ul>'; }
          fs.writeFileSync(`${base}/index.html`, html);
          NODE
          
          # Append App Test Summary based on actual coverage artifacts
          echo -e "\n## App Test Summary" >> review.md
          node -e "
            const fs=require('fs');
            // Get all coverage directories that actually exist
            const covDirs=fs.existsSync('review-artifacts')?fs.readdirSync('review-artifacts').filter(d=>d.startsWith('coverage-')):[];
            const appsWithCoverage=new Set(covDirs.map(d=>d.replace('coverage-','')));
            
            // Get discovered apps from matrix (if any)
            let discoveredApps=[];
            try{discoveredApps=JSON.parse(process.env.APPS_JSON||'[]')}catch(e){}
            
            // Get all apps (discovered + any with coverage)
            const allApps=new Set([...discoveredApps, ...appsWithCoverage]);
            
            if(!allApps.size){
              console.log('No apps found.');
            } else {
              for(const app of Array.from(allApps).sort()){
                const hasCov=appsWithCoverage.has(app);
                let summary='';
                const p='_dl/perapp-'+app+'/perapp-'+app+'.txt';
                if(fs.existsSync(p)) {
                  const content=fs.readFileSync(p,'utf8').trim().replace(/\\n/g,' / ');
                  summary=' / '+content;
                }
                console.log(\`- \${app}: \${hasCov?'coverage collected':'no coverage'}\${summary}\`);
              }
            }
          " >> review.md
          
          echo -e "\n**Coverage Index:** see \`review-artifacts/index.html\`" >> review.md

      - name: Upload final artifact (review-packet)
        uses: actions/upload-artifact@v4
        with:
          name: review-packet
          path: |
            review.md
            review-artifacts/**
            CHANGELOG.md
            README.md
            .gitattributes
            docs/**/*.md
            helpers/**
            expense/README.md
            expense/package.json
            expense/jest.config.*
            todo/README.md
            todo/package.json
            todo/jest.config.*
            stopwatch/README.md
            stopwatch/package.json
            stopwatch/jest.config.*
            quote/README.md
            quote/package.json
            quote/jest.config.*
            expense/src/**
            todo/src/**
            stopwatch/src/**
            quote/src/**
            expense/tests/**
            todo/tests/**
            stopwatch/tests/**
            quote/tests/**
          if-no-files-found: ignore