name: Review Packet

on:
  # Only build on main for pushes to avoid duplicate runs with PRs
  push:
    branches:
      - main
  pull_request:
    branches:
      - '**'
  workflow_dispatch:
  workflow_call:
    inputs:
      ref:
        description: "Ref (branch or commit) to build the review packet from"
        required: false
        type: string
      include_apps:
        description: "Comma-separated app list to include (optional, default = auto-discover)"
        required: false
        type: string
      skip_apps:
        description: "Comma-separated app list to exclude (optional)"
        required: false
        type: string
      include_frontend:
        description: "Include frontend review packet tasks"
        required: false
        default: true
        type: boolean
      include_frontend_next:
        description: "Include frontend-next review packet tasks"
        required: false
        default: true
        type: boolean

# Ensure only one workflow runs per branch/PR at a time
concurrency:
  group: review-packet-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

jobs:
  install-root-deps:
    name: Install root dependencies
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref || github.ref }}
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install root deps
        shell: bash
        run: |
          set -e
          npm config set audit false --location=project
          npm config set fund false --location=project
          echo "Attempting npm ci at repo root"
          if ! npm ci --ignore-scripts; then
            echo "npm ci failed; falling back to npm install with workspaces"
            npm install --workspaces --no-audit --no-fund --ignore-scripts
          fi
          npm ci --workspace=frontend --include-workspace-root=false || npm install --workspaces --workspace=frontend --no-audit --no-fund
          npm ci --workspace=frontend-next --include-workspace-root=false || npm install --workspaces --workspace=frontend-next --no-audit --no-fund

  discover:
    name: Discover app folders
    runs-on: ubuntu-latest
    outputs:
      apps: ${{ steps.scan.outputs.apps }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref || github.ref }}

      - name: Scan for app directories
        id: scan
        shell: bash
        run: |
          set -e
          apps=$(node -e "const fs=require('fs');const skip=new Set(['.git','.github','docs','helpers','labs','repos','node_modules']);const a=fs.readdirSync('.').filter(d=>{try{if(skip.has(d)||d.startsWith('.'))return false;const s=fs.statSync(d);if(!s.isDirectory())return false;return fs.existsSync(d+'/package.json')||(fs.existsSync(d+'/src')&&fs.existsSync(d+'/tests'))||fs.existsSync(d+'/tests');}catch(e){return false;}});process.stdout.write(JSON.stringify(a));")
          [ -z "$apps" ] && apps="[]"
          echo "apps=$apps" >> "$GITHUB_OUTPUT"
          echo "Discovered apps: $apps"
          {
            echo "### Discovered apps";
            echo "\`\`\`json"; echo "$apps"; echo "\`\`\`";
          } >> "$GITHUB_STEP_SUMMARY"

  per_app:
    name: Per-app tests & coverage
    needs: discover
    # Avoid array literal [] in expressions; use join() to test for non-empty array
    if: ${{ join(fromJSON(needs.discover.outputs.apps), '') != '' }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        app: ${{ fromJSON(needs.discover.outputs.apps) }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref || github.ref }}

      - name: Node setup
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Debug matrix app
        run: echo "Running per_app for ${MATRIX_APP}"
        env:
          MATRIX_APP: ${{ matrix.app }}

      - name: Install (best-effort)
        shell: bash
        run: |
          set -e
          APP="${{ matrix.app }}"
          if [ -d "$APP" ]; then
            (cd "$APP" && npm ci) || (cd "$APP" && npm install) || true
          fi

      - name: Jest coverage (best-effort)
        shell: bash
        run: |
          set -e
          APP="${{ matrix.app }}"
          if [ -d "$APP" ]; then
            (cd "$APP" && npx jest --coverage --coverageReporters=lcov --coverageReporters=json-summary) || echo "$APP: jest missing or tests failed; continuing"
            if [ -d "$APP/coverage" ]; then
              mkdir -p "stage/coverage-$APP"
              cp -R "$APP/coverage/." "stage/coverage-$APP/" || true
            fi
          fi

      - name: Upload per-app coverage
        # Skip frontend and frontend-next to avoid artifact name conflicts with dedicated jobs
        if: ${{ matrix.app != 'frontend' && matrix.app != 'frontend-next' && hashFiles(format('{0}/coverage/**', matrix.app)) != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.app }}
          path: stage/coverage-${{ matrix.app }}/**

      - name: Upload per-app summary
        shell: bash
        run: |
          APP="${{ matrix.app }}"
          echo "app=$APP" > "perapp-${APP}.txt"
          if [ -d "stage/coverage-${APP}" ]; then
            echo "coverage=present" >> "perapp-${APP}.txt"
          else
            echo "coverage=absent" >> "perapp-${APP}.txt"
          fi
      - uses: actions/upload-artifact@v4
        with:
          name: perapp-${{ matrix.app }}
          path: perapp-${{ matrix.app }}.txt

  frontend:
    name: Frontend tests & coverage
    runs-on: ubuntu-latest
    needs: install-root-deps
    defaults:
      run:
        working-directory: frontend
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref || github.ref }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install monorepo deps (root)
        working-directory: .
        shell: bash
        run: |
          set -e
          npm config set audit false --location=project
          npm config set fund false --location=project
          if ! npm ci --ignore-scripts; then
            npm install --workspaces --no-audit --no-fund --ignore-scripts
          fi
          npm ci --workspace=frontend --include-workspace-root=false || npm install --workspaces --workspace=frontend --no-audit --no-fund
          npm ci --workspace=frontend-next --include-workspace-root=false || npm install --workspaces --workspace=frontend-next --no-audit --no-fund

      - name: Run tests with coverage (Vitest)
        run: npm run test -- --coverage

      - name: Upload frontend coverage and sources
        uses: actions/upload-artifact@v4
        with:
          name: coverage-frontend
          if-no-files-found: error
          path: |
            frontend/coverage/coverage-summary.json
            frontend/coverage/lcov.info
            frontend/coverage/lcov-report/**

  packet-frontend-next:
    name: Frontend Next tests & coverage
    runs-on: ubuntu-latest
    needs: install-root-deps
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref || github.ref }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies (frontend-next)
        working-directory: frontend-next
        run: npm ci

      - name: Run tests with coverage (frontend-next)
        working-directory: frontend-next
        run: npm run test:ci

      - name: Run contract tests (frontend-next)
        working-directory: frontend-next
        run: npm run test:contract

      - name: Upload contract summary (frontend-next)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: contract-frontend-next
          if-no-files-found: ignore
          path: |
            contract/report.json
      # Note: contract report is uploaded by the dedicated 'contract' job; to avoid duplication, the above step is removed.

      - name: Stage coverage for artifact
        run: |
          mkdir -p stage/coverage-frontend-next
          # Copy only required files for T004
          [ -f frontend-next/coverage/coverage-summary.json ] && cp frontend-next/coverage/coverage-summary.json stage/coverage-frontend-next/ || true
          [ -f frontend-next/coverage/lcov.info ] && cp frontend-next/coverage/lcov.info stage/coverage-frontend-next/ || true
          # Include HTML coverage report directories if present
          if [ -d frontend-next/coverage/lcov-report ]; then
            mkdir -p stage/coverage-frontend-next/lcov-report
            cp -R frontend-next/coverage/lcov-report/. stage/coverage-frontend-next/lcov-report/ || true
          fi
          if [ -d frontend-next/coverage/html ]; then
            mkdir -p stage/coverage-frontend-next/html
            cp -R frontend-next/coverage/html/. stage/coverage-frontend-next/html/ || true
          fi

      - name: Upload frontend-next coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-frontend-next
          if-no-files-found: error
          path: |
            stage/coverage-frontend-next/**

      - name: Upload Playwright report (if present)
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report-frontend-next
          if-no-files-found: ignore
          path: |
            frontend-next/playwright-report/**

      - name: Upload screenshots for frontend-next
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: screenshots-frontend-next
          if-no-files-found: ignore
          path: |
            docs/ReviewPacket/screenshots/frontend-next/**

  a11y:
    name: Frontend Next a11y
    runs-on: ubuntu-latest
    needs: install-root-deps
    defaults:
      run:
        working-directory: frontend-next
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref || github.ref }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install monorepo deps (root)
        working-directory: .
        shell: bash
        run: |
          set -e
          npm config set audit false --location=project
          npm config set fund false --location=project
          if ! npm ci; then
            npm install --workspaces --no-audit --no-fund --ignore-scripts
          fi
          npm ci --workspace=frontend --include-workspace-root=false || npm install --workspaces --workspace=frontend --no-audit --no-fund
          npm ci --workspace=frontend-next --include-workspace-root=false || npm install --workspaces --workspace=frontend-next --no-audit --no-fund
      
      - name: Install Playwright (Chromium only)
        run: npx --yes playwright install chromium

      - name: Run a11y Playwright tests
        run: |
          # Ensure Playwright HTML report lands in the Review Packet path with index.html
          export PLAYWRIGHT_HTML_REPORT=docs/ReviewPacket/a11y/html
          npx playwright test --reporter=list,html
        env:
          # Align Playwright baseURL with dev server port (see frontend-next/playwright.config.ts)
          E2E_PORT: '3001'

      # Combine a11y artifacts into a single artifact to reduce duplication and upload overhead

      - name: Upload a11y reports (combined)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: a11y-frontend-next
          if-no-files-found: ignore
          path: |
            frontend-next/docs/ReviewPacket/a11y/html/**
            a11y/report.json

      - name: Upload Playwright test-results (screenshots)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-test-results-frontend-next
          if-no-files-found: ignore
          path: |
            frontend-next/test-results/**

  contract:
    name: Frontend Next contract
    runs-on: ubuntu-latest
    needs: install-root-deps
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref || github.ref }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install monorepo deps (root)
        shell: bash
        run: |
          set -e
          npm config set audit false --location=project
          npm config set fund false --location=project
          if ! npm ci --ignore-scripts; then
            npm install --workspaces --no-audit --no-fund --ignore-scripts
          fi
          npm ci --workspace=frontend --include-workspace-root=false || npm install --workspaces --workspace=frontend --no-audit --no-fund
          npm ci --workspace=frontend-next --include-workspace-root=false || npm install --workspaces --workspace=frontend-next --no-audit --no-fund

      - name: Run frontend-next contract validation test
        run: npm --workspaces --workspace=frontend-next run test:contract

      - name: Upload contract report (for Review Packet)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: contract-report
          path: contract/report.json

  assemble:
    name: Assemble review packet
    needs: [discover, frontend, packet-frontend-next, a11y, contract]
    if: ${{ always() }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref || github.ref }}

      - name: Node setup
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # OpenAPI contract lint + artifact upload (Phase 4 evidence)
      - name: Install Spectral (OpenAPI linter)
        run: npm i -g @stoplight/spectral-cli

      - name: Lint OpenAPI
        run: spectral lint specs/spec-auth-ownership-observability/contracts/openapi-skeleton.yaml

      - name: Upload OpenAPI contract
        uses: actions/upload-artifact@v4
        with:
          name: openapi-contract
          path: specs/spec-auth-ownership-observability/contracts/openapi-skeleton.yaml
          if-no-files-found: error

      - name: Generate review.md (env + commits + repo map)
        run: |
          {
            echo "# Automated Review Packet"
            echo "## Environment"
            (node -v && npm -v) || echo "node/npm unavailable"
            printf '\n## Commit Summary (20 most recent)\n'
            git log -n 20 --pretty=format:'- %h %ad %an — %s' --date=short
            printf '\n## Repo Map (depth=2)\n'
            find . -maxdepth 2 -type d | sort | sed 's#^\./##'
            printf '\n## Notes\n'
            echo "- Best-effort run: missing tools will not fail the job; see summaries below."
          } > review.md

      - name: Debug apps passed to assemble
        env:
          APPS_JSON: ${{ needs.discover.outputs.apps }}
        run: |
          echo "APPS_JSON=${APPS_JSON:-<empty>}"
          echo "APPS length (parsed):" "$(node -e "try{console.log(JSON.parse(process.env.APPS_JSON||'[]').length)}catch(e){console.log('parse-error')}")"

      - name: Download all per-app artifacts
        uses: actions/download-artifact@v4
        with:
          path: _dl
        continue-on-error: true

      - name: Consolidate coverage artifacts
        run: |
          mkdir -p review-artifacts
          # Move coverage artifacts to review-artifacts/coverage-<app>
          if [ -d "_dl" ]; then
            find _dl -maxdepth 1 -type d -name 'coverage-*' -print0 | while IFS= read -r -d '' d; do
              APP_NAME=$(basename "$d" | sed 's/^coverage-//')
              mkdir -p "review-artifacts/coverage-$APP_NAME"
              cp -R "$d/." "review-artifacts/coverage-$APP_NAME/" || true
              # Flatten frontend paths so coverage files are at expected locations
              if [ "$APP_NAME" = "frontend" ]; then
                if [ -f "review-artifacts/coverage-frontend/frontend/coverage/coverage-summary.json" ]; then
                  mv "review-artifacts/coverage-frontend/frontend/coverage/coverage-summary.json" "review-artifacts/coverage-frontend/coverage-summary.json" || true
                fi
                if [ -d "review-artifacts/coverage-frontend/frontend/coverage/lcov-report" ]; then
                  rm -rf "review-artifacts/coverage-frontend/lcov-report"
                  mv "review-artifacts/coverage-frontend/frontend/coverage/lcov-report" "review-artifacts/coverage-frontend/lcov-report" || true
                fi
              fi
            done
          fi
      - name: Consolidate Playwright reports (frontend-next)
        run: |
          mkdir -p review-artifacts
          if [ -d "_dl/playwright-report-frontend-next" ]; then
            mkdir -p "review-artifacts/playwright-frontend-next"
            cp -R "_dl/playwright-report-frontend-next/." "review-artifacts/playwright-frontend-next/" || true
          fi

      - name: Consolidate a11y and contract artifacts
        run: |
          mkdir -p review-artifacts
          # a11y HTML report (Playwright)
          if [ -d "_dl/a11y-frontend-next/frontend-next/docs/ReviewPacket/a11y/html" ]; then
            mkdir -p "review-artifacts/a11y/html"
            cp -R "_dl/a11y-frontend-next/frontend-next/docs/ReviewPacket/a11y/html/." "review-artifacts/a11y/html/" || true
          fi
          if [ -d "_dl/a11y-html-report" ]; then
            mkdir -p "review-artifacts/a11y/html"
            cp -R "_dl/a11y-html-report/." "review-artifacts/a11y/html/" || true
          fi
          # a11y JSON report (axe summary)
          if [ -f "_dl/a11y-frontend-next/a11y/report.json" ]; then
            mkdir -p "review-artifacts/a11y"
            cp "_dl/a11y-frontend-next/a11y/report.json" "review-artifacts/a11y/report.json" || true
          fi
          if [ -f "_dl/a11y-json-report/a11y/report.json" ]; then
            mkdir -p "review-artifacts/a11y"
            cp "_dl/a11y-json-report/a11y/report.json" "review-artifacts/a11y/report.json" || true
          elif [ -f "_dl/a11y/report.json" ]; then
            mkdir -p "review-artifacts/a11y"
            cp "_dl/a11y/report.json" "review-artifacts/a11y/report.json" || true
          fi
          # Playwright screenshots/test-results
          if [ -d "_dl/playwright-test-results-frontend-next" ]; then
            mkdir -p "review-artifacts/playwright-test-results-frontend-next"
            cp -R "_dl/playwright-test-results-frontend-next/." "review-artifacts/playwright-test-results-frontend-next/" || true
          fi
          # Contract report (client contract summary)
          if [ -f "_dl/contract-report/contract/report.json" ]; then
            mkdir -p "review-artifacts/contract"
            cp "_dl/contract-report/contract/report.json" "review-artifacts/contract/report.json" || true
          elif [ -f "_dl/contract/report.json" ]; then
            mkdir -p "review-artifacts/contract"
            cp "_dl/contract/report.json" "review-artifacts/contract/report.json" || true
          fi

      - name: Serial fallback (always run if no coverage artifacts found)
        shell: bash
        run: |
          set -e
          # Check if we have any coverage artifacts from matrix jobs
          COVERAGE_COUNT=$(find review-artifacts -name "coverage-*" -type d 2>/dev/null | wc -l || echo "0")
          if [ "$COVERAGE_COUNT" -gt 0 ]; then
            echo "Found $COVERAGE_COUNT coverage artifacts from matrix jobs. Skipping serial fallback."
            exit 0
          fi

          echo "No coverage artifacts found. Running serial fallback for all apps."
          APPS=$(node -e "const fs=require('fs');const skip=new Set(['.git','.github','docs','helpers','labs','repos','node_modules']);const a=fs.readdirSync('.').filter(d=>{try{if(skip.has(d)||d.startsWith('.'))return false;const s=fs.statSync(d);if(!s.isDirectory())return false;return fs.existsSync(d+'/package.json')||(fs.existsSync(d+'/src')&&fs.existsSync(d+'/tests'))||fs.existsSync(d+'/tests');}catch(e){return false;}});process.stdout.write(JSON.stringify(a));")
          APPS_FILE=$(mktemp)
          printf '%s' "$APPS" > "$APPS_FILE"
          echo "Locally discovered apps: $APPS"

          if jq -e 'length == 0' "$APPS_FILE" >/dev/null; then
            {
              printf '\n## App Test Summary (serial fallback)\n'
              echo "No apps discovered."
            } >> review.md
            rm -f "$APPS_FILE"
            exit 0
          fi

          printf '\n## App Test Summary (serial fallback)\n' >> review.md
          jq -r '.[]' "$APPS_FILE" > apps.list
          while IFS= read -r APP; do
            echo "- $APP" >> review.md
          done < apps.list

          while IFS= read -r APP; do
            echo "Running serial fallback for $APP"
            if [ -d "$APP" ]; then
              (cd "$APP" && npm ci) || (cd "$APP" && npm install) || true
              if [ -f "$APP/package.json" ]; then
                (cd "$APP" && npx jest --coverage --coverageReporters=lcov --coverageReporters=json-summary) || echo "$APP: jest missing or tests failed; continuing"
              fi
              if [ -d "$APP/coverage" ]; then
                mkdir -p "review-artifacts/coverage-$APP"
                cp -R "$APP/coverage/." "review-artifacts/coverage-$APP/" || true
              fi
            fi
          done < apps.list
          rm -f "$APPS_FILE" apps.list

      - name: Generate final summary and coverage index
        env:
          APPS_JSON: ${{ needs.discover.outputs.apps }}
        run: |
          # Build coverage index
          node -e "
            const fs=require('fs');
            const base='review-artifacts';
            if(!fs.existsSync(base)) fs.mkdirSync(base,{recursive:true});
            const apps=fs.existsSync(base) ? fs.readdirSync(base).filter(d=>d.startsWith('coverage-')).map(d=>d.replace(/^coverage-/,'')) : [];
            let html='<!doctype html><meta charset=\"utf-8\"><title>Coverage Index</title><h1>Coverage Index</h1>';
            if(!apps.length){ html+='<p>No coverage collected.</p>'; }
            else { html+='<ul>'+apps.map(a=>'<li><a href=\"./coverage-'+a+'/lcov-report/index.html\">'+a+'</a></li>').join('')+'</ul>'; }
            fs.writeFileSync(base+'/index.html', html);
          "
          
          # Append App Test Summary based on actual coverage artifacts
          TMP_SUMMARY="$(mktemp)"
          env TMP_SUMMARY="$TMP_SUMMARY" node -e "
            const fs=require('fs');
            const out=fs.createWriteStream(process.env.TMP_SUMMARY,{encoding:'utf8'});
            const covDirs=fs.existsSync('review-artifacts')?fs.readdirSync('review-artifacts').filter(d=>d.startsWith('coverage-')):[];
            const appsWithCoverage=new Set(covDirs.map(d=>d.replace('coverage-','')));
            let discoveredApps=[]; try{discoveredApps=JSON.parse(process.env.APPS_JSON||'[]')}catch(e){}
            const allApps=new Set([...discoveredApps, ...appsWithCoverage]);
            if(!allApps.size){ out.write('No apps found.\n'); }
            else {
              for(const app of Array.from(allApps).sort()){
                const hasCov=appsWithCoverage.has(app);
                let summary='';
                const p='_dl/perapp-'+app+'/perapp-'+app+'.txt';
                if(fs.existsSync(p)) { const content=fs.readFileSync(p,'utf8').trim().replace(/\n/g,' / '); summary=' / '+content; }
                out.write('- '+app+': '+(hasCov?'coverage collected':'no coverage')+summary+'\n');
              }
            }
            out.end();
          "
          {
            printf '\n## App Test Summary\n'
            cat "$TMP_SUMMARY"
            printf '\n**Coverage Index:** see `review-artifacts/index.html`\n'
          } >> review.md
          rm -f "$TMP_SUMMARY"

      - name: Prepare review-packet bundle
        run: |
          set -e
          mkdir -p bundle/review-packet
          cp -R review-artifacts bundle/review-packet/
          cp review.md bundle/review-packet/
      - name: Create zipped review packet
        run: |
          set -e
          cd bundle
          zip -r -9 review-packet.zip review-packet
          ls -lh review-packet.zip
      - name: Upload zipped Review Packet
        uses: actions/upload-artifact@v4
        with:
          name: review-packet
          path: bundle/review-packet.zip

