name: Spec to Linear

on:
  pull_request:
    types:
      - closed
    branches:
      - main

jobs:
  create_linear_issue:
    if: ${{ github.event.pull_request.merged == true && contains(github.event.pull_request.title, '[SPEC]') }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
    steps:
      - name: Create Linear issue
        id: create
        uses: actions/github-script@v7
        env:
          LINEAR_API_KEY: ${{ secrets.LINEAR_API_KEY }}
          LINEAR_TEAM_ID: ${{ secrets.LINEAR_TEAM_ID }}
          PR_TITLE: ${{ github.event.pull_request.title }}
          PR_URL: ${{ github.event.pull_request.html_url }}
          PR_BODY: ${{ github.event.pull_request.body }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          PR_AUTHOR: ${{ github.event.pull_request.user.login }}
          MERGED_AT: ${{ github.event.pull_request.merged_at }}
        with:
          script: |
            const titleRaw = process.env.PR_TITLE || '';
            const cleanedTitle = titleRaw.replace(/\[SPEC\]\s*/gi, '').trim();
            const issueTitle = cleanedTitle || `Spec ${process.env.PR_NUMBER}`;
            const description = [
              'Created automatically from merged spec PR.',
              '',
              `Source PR: ${process.env.PR_URL}`,
              `Author: @${process.env.PR_AUTHOR}`,
              `Merged At: ${process.env.MERGED_AT}`,
              '',
              '----',
              'PR Body:',
              process.env.PR_BODY || '(no description)'
            ].join('\n');

            const query = `
              mutation CreateIssue($input: IssueCreateInput!) {
                issueCreate(input: $input) {
                  success
                  issue { id identifier url title }
                }
              }
            `;
            const variables = {
              input: {
                title: issueTitle,
                description,
                teamId: process.env.LINEAR_TEAM_ID
              }
            };

            if (!process.env.LINEAR_API_KEY) {
              core.setFailed('Missing required secret LINEAR_API_KEY');
              return;
            }
            if (!process.env.LINEAR_TEAM_ID) {
              core.setFailed('Missing required secret LINEAR_TEAM_ID');
              return;
            }

            const res = await fetch('https://api.linear.app/graphql', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
                'Authorization': process.env.LINEAR_API_KEY
              },
              body: JSON.stringify({ query, variables })
            });
            const json = await res.json();
            core.info('Linear response: ' + JSON.stringify(json));
            if (!json.data?.issueCreate?.success) {
              core.setFailed('Failed to create Linear issue: ' + (json.data?.issueCreate?.error || JSON.stringify(json)));
              return;
            }
            const url = json.data.issueCreate.issue.url;
            core.setOutput('linear_url', url);
            core.notice(`Created Linear issue: ${url}`);


