name: CI

on:
  pull_request:
  push:
    branches:
      - main

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  contracts-spectral:
    name: Contracts - Spectral Lint
    runs-on: ubuntu-latest
    timeout-minutes: 5
    concurrency:
      group: spectral-${{ github.ref }}
      cancel-in-progress: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Verify Node.js version (T028/DEV-702)
        run: npm run verify:node

      - name: Spectral Lint (pinned CLI)
        run: |
          mkdir -p specs/008-identity-platform/contracts
          npx @stoplight/spectral-cli@6.11.0 lint \
            specs/008-identity-platform/contracts/openapi.yaml \
            -f json > specs/008-identity-platform/contracts/spectral-report.json || true

      - name: Check Spectral Errors
        run: |
          if [ -f specs/008-identity-platform/contracts/spectral-report.json ]; then
            SPECTRAL_ERRORS=$(cat specs/008-identity-platform/contracts/spectral-report.json | jq '[.[] | select(.severity == 0)] | length')
            echo "Spectral errors found: $SPECTRAL_ERRORS"
            if [ "$SPECTRAL_ERRORS" -gt 0 ]; then
              echo "❌ Found $SPECTRAL_ERRORS Spectral error(s). Fix them before merging."
              jq '[.[] | select(.severity == 0)]' specs/008-identity-platform/contracts/spectral-report.json
              exit 1
            fi
            echo "✅ No Spectral errors found"
          else
            echo "❌ Spectral report not found"
            exit 1
          fi

      - name: Check OpenAPI Drift
        run: npm run contracts:check

      - name: Secret Pattern Check
        run: npm run gate:secrets

      - name: Upload Spectral Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: contracts-spectral-report
          path: specs/008-identity-platform/contracts/spectral-report.json

      - name: Job Summary
        if: always()
        run: |
          {
            echo "### Spectral Lint - openapi.yaml"
            echo "Report: contracts-spectral-report/spectral-report.json"
            if [ -f specs/008-identity-platform/contracts/spectral-report.json ]; then
              echo ""
              echo "#### Report Contents:"
              cat specs/008-identity-platform/contracts/spectral-report.json
            fi
          } >> "$GITHUB_STEP_SUMMARY"

  test:
    # T026: Disabled legacy CI in favor of quality-gate/review-packet
    if: ${{ false }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        node-version: [18, 20, 22]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 15
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install
        run: npm install --no-audit --no-fund
        shell: bash

      - name: Install expense dependencies
        run: cd expense && npm install
        shell: bash
        continue-on-error: true

      - name: Run expense tests with coverage
        run: cd expense && npm test -- --coverage --coverageReporters=lcov --coverageReporters=json-summary
        shell: bash
        continue-on-error: true

      - name: Install todo dependencies
        run: cd todo && npm install
        shell: bash
        continue-on-error: true

      - name: Run todo tests with coverage
        run: cd todo && npm test -- --coverage --coverageReporters=lcov --coverageReporters=json-summary
        shell: bash
        continue-on-error: true

      - name: Install stopwatch dependencies
        run: cd stopwatch && npm install
        shell: bash
        continue-on-error: true

      - name: Run stopwatch tests with coverage
        run: cd stopwatch && npm test -- --coverage --coverageReporters=lcov --coverageReporters=json-summary
        shell: bash
        continue-on-error: true

      - name: Install quote dependencies
        run: cd quote && npm install
        shell: bash
        continue-on-error: true

      - name: Run quote tests with coverage
        run: cd quote && npm test -- --coverage --coverageReporters=lcov --coverageReporters=json-summary
        shell: bash
        continue-on-error: true

      - name: Generate review.md
        shell: bash
        run: |
          {
            echo "# CI Review Packet"
            echo "## Environment"
            node -v
            npm -v
            echo
            echo "## Test Results Summary"
            if [ -d "expense/coverage" ]; then
              echo "- Expense app: coverage generated"
            else
              echo "- Expense app: no coverage"
            fi
            if [ -d "todo/coverage" ]; then
              echo "- Todo app: coverage generated"
            else
              echo "- Todo app: no coverage"
            fi
            if [ -d "stopwatch/coverage" ]; then
              echo "- Stopwatch app: coverage generated"
            else
              echo "- Stopwatch app: no coverage"
            fi
            if [ -d "quote/coverage" ]; then
              echo "- Quote app: coverage generated"
            else
              echo "- Quote app: no coverage"
            fi
            echo
            echo "## Commit Summary (last 10)"
            git log -n 10 --pretty=format:'- %h %ad %an — %s' --date=short || echo "Git log unavailable"
          } > review.md

      - name: Upload expense coverage artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-expense-${{ matrix.os }}-node${{ matrix.node-version }}
          path: |
            expense/coverage/coverage-final.json
            expense/coverage/lcov-report/index.html

      - name: Upload todo coverage artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-todo-${{ matrix.os }}-node${{ matrix.node-version }}
          path: |
            todo/coverage/coverage-final.json
            todo/coverage/lcov-report/index.html

      - name: Upload stopwatch coverage artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-stopwatch-${{ matrix.os }}-node${{ matrix.node-version }}
          path: |
            stopwatch/coverage/coverage-final.json
            stopwatch/coverage/lcov-report/index.html

      - name: Upload quote coverage artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-quote-${{ matrix.os }}-node${{ matrix.node-version }}
          path: |
            quote/coverage/coverage-final.json
            quote/coverage/lcov-report/index.html

      - name: Upload review.md
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: review-md-${{ matrix.os }}-node${{ matrix.node-version }}
          path: review.md

  package-artifacts:
    needs: test
    # T026: Disabled with test job
    if: ${{ false }}
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download all coverage artifacts
        uses: actions/download-artifact@v4
        with:
          path: downloaded-artifacts
          merge-multiple: true

      - name: Download review.md
        uses: actions/download-artifact@v4
        with:
          name: review-md-ubuntu-latest-node20
          path: downloaded-artifacts

      - name: Organize artifacts
        run: |
          mkdir -p review-packet/coverage-reports/{expense,todo,stopwatch,quote}

          # Debug: List all downloaded artifacts
          echo "=== Downloaded Artifacts Structure ==="
          find downloaded-artifacts -type f | sort

          echo ""
          echo "=== Collecting Coverage Files ==="

          # Collect coverage files for each app using corrected approach
          for app in expense todo stopwatch quote; do
            echo "Processing $app coverage files..."

            # Find coverage-final.json - prefer ubuntu-latest-node20, then any ubuntu, then others
            coverage_file=$(find downloaded-artifacts -path "*/coverage-$app-*" -name "coverage-final.json" | grep -E "(ubuntu-latest-node20|ubuntu)" | head -1 || find downloaded-artifacts -path "*/coverage-$app-*" -name "coverage-final.json" | head -1)
            if [ -n "$coverage_file" ] && [ -f "$coverage_file" ]; then
              echo "Found coverage-final.json for $app: $coverage_file"
              cp "$coverage_file" "review-packet/coverage-reports/$app/" 2>/dev/null || true
              echo "✓ Copied coverage-final.json for $app"
            else
              echo "✗ No coverage-final.json found for $app"
              # Try alternative pattern in case the file structure is different
              alt_coverage=$(find downloaded-artifacts -name "*$app*" -type f | grep "coverage-final.json" | head -1)
              if [ -n "$alt_coverage" ] && [ -f "$alt_coverage" ]; then
                echo "Found alternative coverage-final.json for $app: $alt_coverage"
                cp "$alt_coverage" "review-packet/coverage-reports/$app/" 2>/dev/null || true
                echo "✓ Copied alternative coverage-final.json for $app"
              fi
            fi

            # Find index.html (lcov report) - prefer ubuntu-latest-node20, then any ubuntu, then others
            html_file=$(find downloaded-artifacts -path "*/coverage-$app-*" -name "index.html" | grep -E "(ubuntu-latest-node20|ubuntu)" | head -1 || find downloaded-artifacts -path "*/coverage-$app-*" -name "index.html" | head -1)
            if [ -n "$html_file" ] && [ -f "$html_file" ]; then
              echo "Found index.html for $app: $html_file"
              cp "$html_file" "review-packet/coverage-reports/$app/" 2>/dev/null || true
              echo "✓ Copied index.html for $app"
            else
              echo "✗ No index.html found for $app"
              # Try alternative pattern in case the file structure is different
              alt_html=$(find downloaded-artifacts -name "*$app*" -type f | grep "index.html" | head -1)
              if [ -n "$alt_html" ] && [ -f "$alt_html" ]; then
                echo "Found alternative index.html for $app: $alt_html"
                cp "$alt_html" "review-packet/coverage-reports/$app/" 2>/dev/null || true
                echo "✓ Copied alternative index.html for $app"
              fi
            fi
          done

          echo ""
          echo "=== Coverage Collection Summary ==="
          all_collected=true
          for app in expense todo stopwatch quote; do
            coverage_file="review-packet/coverage-reports/$app/coverage-final.json"
            html_file="review-packet/coverage-reports/$app/index.html"

            if [ -f "$coverage_file" ] && [ -f "$html_file" ]; then
              echo "✓ $app: Both coverage files collected successfully"
            elif [ -f "$coverage_file" ]; then
              echo "⚠ $app: Only coverage-final.json found (missing index.html)"
              all_collected=false
            elif [ -f "$html_file" ]; then
              echo "⚠ $app: Only index.html found (missing coverage-final.json)"
              all_collected=false
            else
              echo "✗ $app: No coverage files found"
              all_collected=false
            fi
          done

          echo ""
          if [ "$all_collected" = true ]; then
            echo "🎉 SUCCESS: All coverage artifacts collected for all four applications!"
          else
            echo "❌ WARNING: Some coverage artifacts are missing. Check the debug output above."
          fi

          printf '\n'
          echo "=== Final Review Packet Structure ==="
          find review-packet -type f | sort

          # Copy review.md
          if [ -f "downloaded-artifacts/review.md" ]; then
            cp downloaded-artifacts/review.md review-packet/ 2>/dev/null || true
            echo "✓ Copied existing review.md"
          else
            {
              echo "# CI Review Packet"
              echo "## Generated on $(date)"
              echo
              echo "## Coverage Reports Summary"
              if [ -f "review-packet/coverage-reports/expense/coverage-final.json" ]; then echo "- Expense app: ✓ Available"; else echo "- Expense app: ✗ Missing"; fi
              if [ -f "review-packet/coverage-reports/todo/coverage-final.json" ]; then echo "- Todo app: ✓ Available"; else echo "- Todo app: ✗ Missing"; fi
              if [ -f "review-packet/coverage-reports/stopwatch/coverage-final.json" ]; then echo "- Stopwatch app: ✓ Available"; else echo "- Stopwatch app: ✗ Missing"; fi
              if [ -f "review-packet/coverage-reports/quote/coverage-final.json" ]; then echo "- Quote app: ✓ Available"; else echo "- Quote app: ✗ Missing"; fi
              echo
              echo "## Environment Details"
              echo "- CI Run: ${{ github.run_id }}"
              echo "- Branch: ${{ github.ref_name }}"
              echo
              echo "## Note"
              echo "This review packet contains coverage reports from all four applications."
            } > review-packet/review.md
          fi

      - name: Create review-packet.zip
        run: |
          cd review-packet
          zip -r ../review-packet.zip ./*
          cd ..
          ls -la review-packet.zip

      - name: Upload final review packet
        uses: actions/upload-artifact@v4
        with:
          name: review-packet
          path: review-packet.zip

  k6-verdict:
    name: k6 Threshold Verdict
    needs: contracts-spectral
    runs-on: ubuntu-latest
    timeout-minutes: 2
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Verify Node.js version (T028/DEV-702)
        run: npm run verify:node

      - name: Print k6 threshold verdict (non-gating)
        run: node scripts/ci/print-k6-verdict.mjs bench/results/k6-summary.json
