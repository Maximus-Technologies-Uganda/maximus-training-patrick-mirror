name: CI

on:
  pull_request:
  push:
    branches:
      - main

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  secret-scan: # T055 - Gitleaks (OSS CLI to avoid license issues)
    name: Security - Secret Scan (Gitleaks)
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for better leak detection

      - name: Install Gitleaks CLI (OSS)
        shell: bash
        run: |
          set -euo pipefail
          VERSION="8.18.4"
          URL="https://github.com/gitleaks/gitleaks/releases/download/v${VERSION}/gitleaks_${VERSION}_linux_x64.tar.gz"
          echo "Downloading gitleaks $VERSION from $URL"
          curl -sSL "$URL" -o /tmp/gitleaks.tgz
          tar -xzf /tmp/gitleaks.tgz -C /tmp
          sudo mv /tmp/gitleaks /usr/local/bin/gitleaks
          gitleaks version

      - name: Run Gitleaks Scan
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          CONFIG_ARG=""
          if [ -f .gitleaks.toml ]; then CONFIG_ARG="--config .gitleaks.toml"; fi
          # Use redact to avoid leaking secrets in logs; fail on findings
          gitleaks detect --no-banner --redact $CONFIG_ARG --exit-code 1 --source .

  app-router-check: # T056 - Enforce App Router
    name: Lint - Enforce App Router (No Pages Dir)
    runs-on: ubuntu-latest
    timeout-minutes: 2
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check for pages directory
        run: |
          if [ -d "frontend-next/src/pages" ] || [ -d "frontend-next/pages" ]; then
            echo "❌ Error: The 'pages' directory is present in 'frontend-next'."
            echo "This project must use the Next.js App Router ('app/' directory) exclusively."
            exit 1
          else
            echo "✅ Correct: No 'pages' directory found."
          fi
          if [ -d "frontend-next/src/pages/api" ] || [ -d "frontend-next/pages/api" ]; then
             echo "❌ Error: The 'pages/api' directory is present in 'frontend-next'."
             echo "API routes must use the App Router ('app/api/' directory)."
             exit 1
          else
              echo "✅ Correct: No 'pages/api' directory found."
          fi

  contracts-spectral:
    name: Contracts - Spectral Lint
    needs: [secret-scan, app-router-check]
    runs-on: ubuntu-latest
    timeout-minutes: 5
    concurrency:
      group: spectral-${{ github.ref }}
      cancel-in-progress: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Enable Corepack (pnpm 9)
        run: |
          corepack enable
          corepack prepare pnpm@9.x --activate
      - name: Resolve pnpm store path
        id: pnpm-store
        shell: bash
        run: |
          set -euo pipefail
          echo "PNPM_STORE_PATH=$(pnpm store path)" >> "$GITHUB_ENV"
          echo "path=$(pnpm store path)" >> "$GITHUB_OUTPUT"
      - name: Cache pnpm store
        uses: actions/cache@v4
        with:
          path: ${{ env.PNPM_STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install root dependencies (tsx/yaml for contracts checks)
        run: pnpm install --ignore-scripts --frozen-lockfile=false --silent

      - name: Spectral Lint (pinned CLI @6.11.0 - T054)
        env:
          SPECTRAL_REPORT: specs/008-identity-platform/contracts/spectral-report.json
        run: |
          set -euo pipefail
          mkdir -p "$(dirname "$SPECTRAL_REPORT")"
          node scripts/generate-spectral-report.mjs
          # Ensure report file exists and is non-empty
          if [ ! -s "$SPECTRAL_REPORT" ]; then
            echo "Spectral report was not created; failing step"
            exit 1
          fi

      - name: Check Spectral Errors
        run: |
          if [ -f specs/008-identity-platform/contracts/spectral-report.json ]; then
            # Ensure jq is installed
            sudo apt-get update && sudo apt-get install -y jq
            SPECTRAL_ERRORS=$(cat specs/008-identity-platform/contracts/spectral-report.json | jq '[.[] | select(.severity == 0)] | length')
            echo "Spectral errors found: $SPECTRAL_ERRORS"
            if [ "$SPECTRAL_ERRORS" -gt 0 ]; then
              echo "❌ Found $SPECTRAL_ERRORS Spectral error(s). Fix them before merging."
              jq '[.[] | select(.severity == 0)]' specs/008-identity-platform/contracts/spectral-report.json
              exit 1
            fi
            echo "✅ No Spectral errors found"
          else
            echo "❌ Spectral report not found"
            exit 1
          fi

      - name: Check OpenAPI Drift
        run: pnpm run contracts:check # requires tsx/yaml from root devDependencies

      # Removed redundant Secret Pattern Check step
      # - name: Secret Pattern Check
      #   run: pnpm run gate:secrets

      - name: Upload Spectral Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: contracts-spectral-report
          path: specs/008-identity-platform/contracts/spectral-report.json
          retention-days: 21

      - name: Job Summary
        if: always()
        run: |
          {
            echo "### Spectral Lint - openapi.yaml"
            echo "Report: contracts-spectral-report/spectral-report.json"
            if [ -f specs/008-identity-platform/contracts/spectral-report.json ]; then
              echo ""
              echo "#### Report Contents (Errors Only):"
              jq '[.[] | select(.severity == 0)]' specs/008-identity-platform/contracts/spectral-report.json || echo "No errors found or report invalid."
            else
              echo "Spectral report file not found."
            fi
          } >> "$GITHUB_STEP_SUMMARY"

  dependency-audit:
    name: Security - Dependency Audit (non-gating) (T090)
    runs-on: ubuntu-latest
    timeout-minutes: 10
    continue-on-error: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Enable Corepack (pnpm)
        run: |
          corepack enable
          corepack prepare pnpm@9.x --activate
      - name: Install (frozen)
        run: pnpm install --ignore-scripts --frozen-lockfile=false
      - name: Audit for High/Critical
        run: |
          # Prefer npm audit (broad ecosystem support) for now
          npm audit --audit-level=high || true
      - name: Job Summary
        if: always()
        run: echo "Dependency audit executed (non-gating). See logs for findings." >> "$GITHUB_STEP_SUMMARY"

  latency-bench:
    name: Observability - Latency Bench (non-gating)
    needs: [dependency-audit]
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Enable Corepack (pnpm)
        run: |
          corepack enable
          corepack prepare pnpm@9.x --activate

      - name: Install dependencies
        run: pnpm install --ignore-scripts --frozen-lockfile=false

      - name: Run latency bench (non-gating)
        run: pnpm exec tsx scripts/quality-gate/run-latency-bench.ts

  frontend-a11y:
    name: Frontend - A11y Artifacts (HTML + video)
    needs: [contracts-spectral]
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Enable Corepack (pnpm)
        run: |
          corepack enable
          corepack prepare pnpm@9.x --activate

      - name: Install dependencies
        run: pnpm install --ignore-scripts --frozen-lockfile=false

      - name: Install Playwright browsers
        run: pnpm --filter frontend-next exec playwright install --with-deps chromium

      - name: Run frontend a11y suite
        env:
          CI: true
        run: pnpm --filter frontend-next test:e2e -- --grep "keyboard-only"

      - name: Verify a11y artifact layout
        run: pnpm exec tsx tests/a11y/verify-artifacts.ts

      - name: Upload a11y artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: a11y-frontend-next
          path: a11y-frontend-next
          if-no-files-found: error
          retention-days: 21

      - name: Job Summary
        if: always()
        run: |
          echo "### Frontend A11y" >> "$GITHUB_STEP_SUMMARY"
          if [ -d a11y-frontend-next ]; then
            SHA_DIR=$(ls a11y-frontend-next | head -n 1)
            if [ -n "$SHA_DIR" ]; then
              echo "- HTML: a11y-frontend-next/${SHA_DIR}/index.html" >> "$GITHUB_STEP_SUMMARY"
              if [ -f "a11y-frontend-next/${SHA_DIR}/keyboard-only.webm" ]; then
                echo "- Video: a11y-frontend-next/${SHA_DIR}/keyboard-only.webm" >> "$GITHUB_STEP_SUMMARY"
              fi
            else
              echo "- a11y artifact directory was created but commit subdirectory is missing." >> "$GITHUB_STEP_SUMMARY"
            fi
          else
            echo "- a11y artifacts directory not produced." >> "$GITHUB_STEP_SUMMARY"
          fi
