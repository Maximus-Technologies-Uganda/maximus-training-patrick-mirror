name: CI/CD - Test then Deploy

on:
  # Trigger on pushes to the main branch (for deployment)
  push:
    branches:
      - "main"
  
  # Trigger on pull requests targeting the main branch (for testing)
  pull_request:
    branches:
      - "main"

  # Allow manual triggering from the GitHub Actions UI
  workflow_dispatch:

permissions:
  contents: 'read'
  id-token: 'write' # Required for Workload Identity Federation
  pull-requests: 'write'

env:
  PROJECT_ID: 'proj-app-dev'
  REGION: 'africa-south1'

jobs:
  test-and-build:
    name: Quality Gate - Run All Checks
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout code'
        uses: 'actions/checkout@v4'

      - name: 'Set up Node.js with caching'
        uses: 'actions/setup-node@v4'
        with:
          node-version: '20'
          cache: 'npm'

      - name: 'Install All Dependencies'
        run: npm ci

      - name: 'Run Lint Check'
        id: lint
        run: npm run lint

      # TODO: Re-enable audit once jest-openapi vulnerability is resolved.
      # - name: 'Run Dependency Audit'
      #   run: npm audit --audit-level=high

      - name: 'Run All Tests (Unit & Contract)'
        id: tests
        run: npm test

      - name: 'Build All Workspaces'
        id: build
        run: npm run build

      - name: 'Cache Playwright browsers'
        uses: 'actions/cache@v4'
        id: playwright-cache
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-playwright-

      - name: 'Install Frontend Dependencies'
        run: npm ci --workspace=frontend-next

      - name: 'Install Playwright Browsers'
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: npm exec -w frontend-next -- playwright install --with-deps

      - name: 'Run Frontend A11y & E2E Tests'
        id: e2e
        run: npm run test:e2e -w frontend-next

      - name: 'Generate PR Summary Report'
        if: always() # Generate summary even if earlier steps failed
        run: |
          echo "# Quality Gate Summary" > pr-summary.md
          echo "" >> pr-summary.md
          echo "- Overall Job Status: ${{ job.status }}" >> pr-summary.md
          echo "" >> pr-summary.md
          echo "| Check | Status |" >> pr-summary.md
          echo "|---|---|" >> pr-summary.md
          echo "| Lint | ${{ steps.lint.outcome }} |" >> pr-summary.md
          echo "| Tests | ${{ steps.tests.outcome }} |" >> pr-summary.md
          echo "| Build | ${{ steps.build.outcome }} |" >> pr-summary.md
          echo "| E2E | ${{ steps.e2e.outcome }} |" >> pr-summary.md

      - name: 'Post PR Summary Comment'
        if: always() && github.event_name == 'pull_request'
        uses: 'marocchino/sticky-pull-request-comment@v2'
        with:
          path: pr-summary.md

      - name: 'Upload Review Packet Artifact'
        if: always() # Always upload artifacts, even if tests fail
        uses: 'actions/upload-artifact@v4'
        with:
          name: review-packet
          path: |
            coverage/
            frontend-next/playwright-report/
          retention-days: 7

  deploy:
    name: Deploy to Cloud Run
    needs: test-and-build # Deploy only if all checks in the previous job succeed
    # Deploy only on a direct push to the main branch
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout code'
        uses: 'actions/checkout@v4'

      - name: 'Authenticate to Google Cloud'
        id: 'auth'
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: '${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}'
          service_account: '${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}'

      - name: 'Set up gcloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'

      - name: 'Submit monolithic build to Google Cloud Build'
        run: |
          gcloud builds submit \
            --config=cloudbuild.yaml \
            --project="${{ env.PROJECT_ID }}" \
            --region="${{ env.REGION }}" \
            .

