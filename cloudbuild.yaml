substitutions:
  _REGION: africa-south1
  _AR_REPOSITORY: cloud-run-images
  _API_SERVICE_NAME: maximus-training-api
  _FRONTEND_SERVICE_NAME: maximus-training-frontend
  _SERVICE_ACCOUNT: ""
  _ALLOW_UNAUTH_API: "false"
  _ALLOW_UNAUTH_FRONTEND: "false"
  _API_MEMORY: 512Mi
  _API_CPU: '1'
  _API_MIN_INSTANCES: '0'
  _API_MAX_INSTANCES: '10'
  _API_TIMEOUT: 300s
  _FRONTEND_MEMORY: 512Mi
  _FRONTEND_CPU: '1'
  _FRONTEND_MIN_INSTANCES: '1'
  _FRONTEND_MAX_INSTANCES: '10'
  _FRONTEND_TIMEOUT: 300s

options:
  logging: CLOUD_LOGGING_ONLY
  machineType: E2_HIGHCPU_8

steps:
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    id: Debug Context
    entrypoint: bash
    args:
      - -ceu
      - |
        set -euxo pipefail
        echo "Project: ${PROJECT_ID}"
        gcloud --version
        gcloud auth list || true
        gcloud config list

  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    id: Ensure Artifact Registry
    entrypoint: bash
    args:
      - -ceu
      - |
        set -euxo pipefail
        gcloud artifacts repositories describe "${_AR_REPOSITORY}" --location="${_REGION}" \
          || gcloud artifacts repositories create "${_AR_REPOSITORY}" --repository-format=docker --location="${_REGION}" --description="Cloud Run images" \
          || echo "Repo ensure step failed (permissions?); continuing."

  # Build and deploy API first
  - name: 'gcr.io/cloud-builders/docker'
    id: Build API Image
    entrypoint: bash
    env:
      - DOCKER_BUILDKIT=1
    args:
      - -ceu
      - |
        set -euxo pipefail
        docker build \
          --progress=plain \
          -t "${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_AR_REPOSITORY}/${_API_SERVICE_NAME}:${BUILD_ID}" \
          -f api/Dockerfile \
          api

  - name: 'gcr.io/cloud-builders/docker'
    id: Push API Image
    args:
      - push
      - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_AR_REPOSITORY}/${_API_SERVICE_NAME}:${BUILD_ID}'

  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    id: Deploy API
    entrypoint: bash
    args:
      - -ceu
      - |
        set -euxo pipefail
        DEPLOY_ARGS=(run deploy "${_API_SERVICE_NAME}" \
          --image="${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_AR_REPOSITORY}/${_API_SERVICE_NAME}:${BUILD_ID}" \
          --project="${PROJECT_ID}" \
          --region="${_REGION}" \
          --platform=managed \
          --port=8080 \
          --memory="${_API_MEMORY}" \
          --cpu="${_API_CPU}" \
          --min-instances="${_API_MIN_INSTANCES}" \
          --max-instances="${_API_MAX_INSTANCES}" \
          --timeout="${_API_TIMEOUT}" \
          --ingress=all)
        if [ -n "${_SERVICE_ACCOUNT}" ]; then
          DEPLOY_ARGS+=(--service-account="${_SERVICE_ACCOUNT}")
        fi
        if [ "${_ALLOW_UNAUTH_API}" = "true" ]; then
          DEPLOY_ARGS+=(--allow-unauthenticated)
        fi
        gcloud --verbosity=debug "${DEPLOY_ARGS[@]}"

  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    id: Capture API URL
    entrypoint: bash
    args:
      - -ceu
      - |
        set -euxo pipefail
        API_URL=$(gcloud run services describe "${_API_SERVICE_NAME}" --project "${PROJECT_ID}" --region "${_REGION}" --format='value(status.url)')
        if [ -z "$$API_URL" ]; then
          echo "Failed to resolve API URL" >&2
          exit 1
        fi
        echo "Resolved API URL: $$API_URL"
        printf '%s' "$$API_URL" > api_url.txt

  # Build frontend with API URL baked in
  - name: 'gcr.io/cloud-builders/docker'
    id: Build Frontend Image
    entrypoint: bash
    env:
      - DOCKER_BUILDKIT=1
    args:
      - -ceu
      - |
        set -euxo pipefail
        API_URL=$(cat api_url.txt)
        echo "Building frontend image (Route Handlers mode; no client NEXT_PUBLIC_API_URL)"
        docker build \
          --progress=plain \
          --build-arg BUILDKIT_INLINE_CACHE=1 \
          -t "${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_AR_REPOSITORY}/${_FRONTEND_SERVICE_NAME}:${BUILD_ID}" \
          -f frontend-next/Dockerfile \
          .

  - name: 'gcr.io/cloud-builders/docker'
    id: Push Frontend Image
    args:
      - push
      - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_AR_REPOSITORY}/${_FRONTEND_SERVICE_NAME}:${BUILD_ID}'

  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    id: Deploy Frontend
    entrypoint: bash
    args:
      - -ceu
      - |
        set -euxo pipefail
        API_URL=$(cat api_url.txt)
        DEPLOY_ARGS=(run deploy "${_FRONTEND_SERVICE_NAME}" \
          --image="${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_AR_REPOSITORY}/${_FRONTEND_SERVICE_NAME}:${BUILD_ID}" \
          --project="${PROJECT_ID}" \
          --region="${_REGION}" \
          --platform=managed \
          --port=8080 \
          --set-env-vars="NODE_ENV=production,NEXT_TELEMETRY_DISABLED=1,API_BASE_URL=$$API_URL" \
          --memory="${_FRONTEND_MEMORY}" \
          --cpu="${_FRONTEND_CPU}" \
          --min-instances="${_FRONTEND_MIN_INSTANCES}" \
          --max-instances="${_FRONTEND_MAX_INSTANCES}" \
          --timeout="${_FRONTEND_TIMEOUT}" \
          --ingress=all)
        if [ -n "${_SERVICE_ACCOUNT}" ]; then
          DEPLOY_ARGS+=(--service-account="${_SERVICE_ACCOUNT}")
        fi
        if [ "${_ALLOW_UNAUTH_FRONTEND}" = "true" ]; then
          DEPLOY_ARGS+=(--allow-unauthenticated)
        fi
        gcloud --verbosity=debug "${DEPLOY_ARGS[@]}"

  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    id: Verify Frontend
    entrypoint: bash
    args:
      - -ceu
      - |
        set -euxo pipefail
        SERVICE_URL=$(gcloud run services describe "${_FRONTEND_SERVICE_NAME}" --project "${PROJECT_ID}" --region "${_REGION}" --format='value(status.url)')
        if [ -z "$$SERVICE_URL" ]; then
          echo "Failed to resolve frontend service URL" >&2
          exit 1
        fi
        echo "Service URL: $$SERVICE_URL"
        sleep 10
        if [ "${_ALLOW_UNAUTH_FRONTEND}" = "true" ]; then
          echo "Frontend allows unauthenticated access; verifying anonymously."
          AUTH_HEADER=()
        else
          echo "Frontend is private; verifying with an identity token."
          AUDIENCE="${_FRONTEND_AUDIENCE:-$$SERVICE_URL}"
          TOKEN=$(gcloud auth print-identity-token --audiences="$$AUDIENCE")
          if [ -z "$$TOKEN" ]; then
            echo "Failed to mint identity token" >&2
            exit 1
          fi
          AUTH_HEADER=(-H "Authorization: Bearer $$TOKEN")
        fi
        for i in {1..20}; do
          CODE=$(curl -s -L --connect-timeout 5 --max-time 10 "${AUTH_HEADER[@]}" -o /dev/null -w "%{http_code}" "$$SERVICE_URL") || true
          if [ "$$CODE" = "200" ] || [ "$$CODE" = "301" ] || [ "$$CODE" = "302" ]; then
            echo "Frontend responding (HTTP $$CODE)"
            exit 0
          fi
          echo "Attempt $$i: HTTP $$CODE; retrying..."
          sleep 5
        done
        echo "Frontend verification failed"
        exit 1

images:
  - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_AR_REPOSITORY}/${_API_SERVICE_NAME}:${BUILD_ID}'
  - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_AR_REPOSITORY}/${_FRONTEND_SERVICE_NAME}:${BUILD_ID}'

timeout: '1800s'


